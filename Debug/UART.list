
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031e8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800337c  0800337c  0001337c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003394  08003394  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003394  08003394  00013394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800339c  0800339c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800339c  0800339c  0001339c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033a0  080033a0  000133a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080033a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000010  080033b4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  080033b4  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e055  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b58  00000000  00000000  0002e095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  0002fbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b70  00000000  00000000  000307f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e14  00000000  00000000  00031368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d59f  00000000  00000000  0004717c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c676  00000000  00000000  0005471b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e0d91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032d4  00000000  00000000  000e0de4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003364 	.word	0x08003364

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08003364 	.word	0x08003364

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a07      	ldr	r2, [pc, #28]	; (80004f8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d106      	bne.n	80004ec <HAL_TIM_PeriodElapsedCallback+0x20>
		count--;
 80004de:	4b07      	ldr	r3, [pc, #28]	; (80004fc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	3b01      	subs	r3, #1
 80004e6:	b2da      	uxtb	r2, r3
 80004e8:	4b04      	ldr	r3, [pc, #16]	; (80004fc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80004ea:	701a      	strb	r2, [r3, #0]
	}
}
 80004ec:	bf00      	nop
 80004ee:	370c      	adds	r7, #12
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	40000400 	.word	0x40000400
 80004fc:	20000000 	.word	0x20000000

08000500 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,usuario,10,5);
 8000508:	2305      	movs	r3, #5
 800050a:	220a      	movs	r2, #10
 800050c:	4906      	ldr	r1, [pc, #24]	; (8000528 <HAL_UART_RxCpltCallback+0x28>)
 800050e:	4807      	ldr	r0, [pc, #28]	; (800052c <HAL_UART_RxCpltCallback+0x2c>)
 8000510:	f001 ff81 	bl	8002416 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, usuario, 10);
 8000514:	220a      	movs	r2, #10
 8000516:	4904      	ldr	r1, [pc, #16]	; (8000528 <HAL_UART_RxCpltCallback+0x28>)
 8000518:	4804      	ldr	r0, [pc, #16]	; (800052c <HAL_UART_RxCpltCallback+0x2c>)
 800051a:	f002 f80e 	bl	800253a <HAL_UART_Receive_IT>
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000074 	.word	0x20000074
 800052c:	20000080 	.word	0x20000080

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 fa9a 	bl	8000a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f826 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 f908 	bl	8000750 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000540:	f000 f8dc 	bl	80006fc <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000544:	f000 f88c 	bl	8000660 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim3);
 8000548:	480a      	ldr	r0, [pc, #40]	; (8000574 <main+0x44>)
 800054a:	f001 fb21 	bl	8001b90 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, usuario, 10);
 800054e:	220a      	movs	r2, #10
 8000550:	4909      	ldr	r1, [pc, #36]	; (8000578 <main+0x48>)
 8000552:	480a      	ldr	r0, [pc, #40]	; (800057c <main+0x4c>)
 8000554:	f001 fff1 	bl	800253a <HAL_UART_Receive_IT>
  while (1)
  {
	//HAL_UART_Transmit_IT(&huart2, dataT1, strlen((char*)dataT1));


	if(!count){
 8000558:	4b09      	ldr	r3, [pc, #36]	; (8000580 <main+0x50>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	b2db      	uxtb	r3, r3
 800055e:	2b00      	cmp	r3, #0
 8000560:	d1fa      	bne.n	8000558 <main+0x28>
		count=10;
 8000562:	4b07      	ldr	r3, [pc, #28]	; (8000580 <main+0x50>)
 8000564:	220a      	movs	r2, #10
 8000566:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000568:	2120      	movs	r1, #32
 800056a:	4806      	ldr	r0, [pc, #24]	; (8000584 <main+0x54>)
 800056c:	f000 fe31 	bl	80011d2 <HAL_GPIO_TogglePin>
	if(!count){
 8000570:	e7f2      	b.n	8000558 <main+0x28>
 8000572:	bf00      	nop
 8000574:	2000002c 	.word	0x2000002c
 8000578:	20000074 	.word	0x20000074
 800057c:	20000080 	.word	0x20000080
 8000580:	20000000 	.word	0x20000000
 8000584:	40020000 	.word	0x40020000

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	; 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	2230      	movs	r2, #48	; 0x30
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f002 fedc 	bl	8003354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	4b29      	ldr	r3, [pc, #164]	; (8000658 <SystemClock_Config+0xd0>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	4a28      	ldr	r2, [pc, #160]	; (8000658 <SystemClock_Config+0xd0>)
 80005b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ba:	6413      	str	r3, [r2, #64]	; 0x40
 80005bc:	4b26      	ldr	r3, [pc, #152]	; (8000658 <SystemClock_Config+0xd0>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005c8:	2300      	movs	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	4b23      	ldr	r3, [pc, #140]	; (800065c <SystemClock_Config+0xd4>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005d4:	4a21      	ldr	r2, [pc, #132]	; (800065c <SystemClock_Config+0xd4>)
 80005d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4b1f      	ldr	r3, [pc, #124]	; (800065c <SystemClock_Config+0xd4>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e8:	2302      	movs	r3, #2
 80005ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ec:	2301      	movs	r3, #1
 80005ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f0:	2310      	movs	r3, #16
 80005f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f4:	2302      	movs	r3, #2
 80005f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f8:	2300      	movs	r3, #0
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005fc:	2310      	movs	r3, #16
 80005fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000600:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000604:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000606:	2304      	movs	r3, #4
 8000608:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800060a:	2307      	movs	r3, #7
 800060c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	4618      	mov	r0, r3
 8000614:	f000 fdf8 	bl	8001208 <HAL_RCC_OscConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800061e:	f000 f905 	bl	800082c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000622:	230f      	movs	r3, #15
 8000624:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000626:	2302      	movs	r3, #2
 8000628:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800062e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000632:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2102      	movs	r1, #2
 800063e:	4618      	mov	r0, r3
 8000640:	f001 f85a 	bl	80016f8 <HAL_RCC_ClockConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800064a:	f000 f8ef 	bl	800082c <Error_Handler>
  }
}
 800064e:	bf00      	nop
 8000650:	3750      	adds	r7, #80	; 0x50
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000666:	f107 0308 	add.w	r3, r7, #8
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000674:	463b      	mov	r3, r7
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800067c:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <MX_TIM3_Init+0x94>)
 800067e:	4a1e      	ldr	r2, [pc, #120]	; (80006f8 <MX_TIM3_Init+0x98>)
 8000680:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8000682:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <MX_TIM3_Init+0x94>)
 8000684:	2263      	movs	r2, #99	; 0x63
 8000686:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000688:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <MX_TIM3_Init+0x94>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8400;
 800068e:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <MX_TIM3_Init+0x94>)
 8000690:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8000694:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000696:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <MX_TIM3_Init+0x94>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800069c:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_TIM3_Init+0x94>)
 800069e:	2280      	movs	r2, #128	; 0x80
 80006a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006a2:	4814      	ldr	r0, [pc, #80]	; (80006f4 <MX_TIM3_Init+0x94>)
 80006a4:	f001 fa24 	bl	8001af0 <HAL_TIM_Base_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80006ae:	f000 f8bd 	bl	800082c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	4619      	mov	r1, r3
 80006be:	480d      	ldr	r0, [pc, #52]	; (80006f4 <MX_TIM3_Init+0x94>)
 80006c0:	f001 fbd0 	bl	8001e64 <HAL_TIM_ConfigClockSource>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80006ca:	f000 f8af 	bl	800082c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ce:	2300      	movs	r3, #0
 80006d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006d6:	463b      	mov	r3, r7
 80006d8:	4619      	mov	r1, r3
 80006da:	4806      	ldr	r0, [pc, #24]	; (80006f4 <MX_TIM3_Init+0x94>)
 80006dc:	f001 fdcc 	bl	8002278 <HAL_TIMEx_MasterConfigSynchronization>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80006e6:	f000 f8a1 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	3718      	adds	r7, #24
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	2000002c 	.word	0x2000002c
 80006f8:	40000400 	.word	0x40000400

080006fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000702:	4a12      	ldr	r2, [pc, #72]	; (800074c <MX_USART2_UART_Init+0x50>)
 8000704:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000706:	4b10      	ldr	r3, [pc, #64]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000708:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800070c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000734:	f001 fe22 	bl	800237c <HAL_UART_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800073e:	f000 f875 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000080 	.word	0x20000080
 800074c:	40004400 	.word	0x40004400

08000750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08a      	sub	sp, #40	; 0x28
 8000754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	4b2d      	ldr	r3, [pc, #180]	; (8000820 <MX_GPIO_Init+0xd0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a2c      	ldr	r2, [pc, #176]	; (8000820 <MX_GPIO_Init+0xd0>)
 8000770:	f043 0304 	orr.w	r3, r3, #4
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b2a      	ldr	r3, [pc, #168]	; (8000820 <MX_GPIO_Init+0xd0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0304 	and.w	r3, r3, #4
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	4b26      	ldr	r3, [pc, #152]	; (8000820 <MX_GPIO_Init+0xd0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a25      	ldr	r2, [pc, #148]	; (8000820 <MX_GPIO_Init+0xd0>)
 800078c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b23      	ldr	r3, [pc, #140]	; (8000820 <MX_GPIO_Init+0xd0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	4b1f      	ldr	r3, [pc, #124]	; (8000820 <MX_GPIO_Init+0xd0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a1e      	ldr	r2, [pc, #120]	; (8000820 <MX_GPIO_Init+0xd0>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_GPIO_Init+0xd0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b18      	ldr	r3, [pc, #96]	; (8000820 <MX_GPIO_Init+0xd0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a17      	ldr	r2, [pc, #92]	; (8000820 <MX_GPIO_Init+0xd0>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b15      	ldr	r3, [pc, #84]	; (8000820 <MX_GPIO_Init+0xd0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2120      	movs	r1, #32
 80007da:	4812      	ldr	r0, [pc, #72]	; (8000824 <MX_GPIO_Init+0xd4>)
 80007dc:	f000 fce0 	bl	80011a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007e6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4619      	mov	r1, r3
 80007f6:	480c      	ldr	r0, [pc, #48]	; (8000828 <MX_GPIO_Init+0xd8>)
 80007f8:	f000 fb4e 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007fc:	2320      	movs	r3, #32
 80007fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4619      	mov	r1, r3
 8000812:	4804      	ldr	r0, [pc, #16]	; (8000824 <MX_GPIO_Init+0xd4>)
 8000814:	f000 fb40 	bl	8000e98 <HAL_GPIO_Init>

}
 8000818:	bf00      	nop
 800081a:	3728      	adds	r7, #40	; 0x28
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40023800 	.word	0x40023800
 8000824:	40020000 	.word	0x40020000
 8000828:	40020800 	.word	0x40020800

0800082c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000830:	b672      	cpsid	i
}
 8000832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000834:	e7fe      	b.n	8000834 <Error_Handler+0x8>
	...

08000838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <HAL_MspInit+0x4c>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000846:	4a0f      	ldr	r2, [pc, #60]	; (8000884 <HAL_MspInit+0x4c>)
 8000848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084c:	6453      	str	r3, [r2, #68]	; 0x44
 800084e:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <HAL_MspInit+0x4c>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <HAL_MspInit+0x4c>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	4a08      	ldr	r2, [pc, #32]	; (8000884 <HAL_MspInit+0x4c>)
 8000864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000868:	6413      	str	r3, [r2, #64]	; 0x40
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <HAL_MspInit+0x4c>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000876:	2007      	movs	r0, #7
 8000878:	f000 fa3a 	bl	8000cf0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087c:	bf00      	nop
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40023800 	.word	0x40023800

08000888 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <HAL_TIM_Base_MspInit+0x48>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d115      	bne.n	80008c6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <HAL_TIM_Base_MspInit+0x4c>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	4a0c      	ldr	r2, [pc, #48]	; (80008d4 <HAL_TIM_Base_MspInit+0x4c>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	6413      	str	r3, [r2, #64]	; 0x40
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <HAL_TIM_Base_MspInit+0x4c>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2100      	movs	r1, #0
 80008ba:	201d      	movs	r0, #29
 80008bc:	f000 fa23 	bl	8000d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80008c0:	201d      	movs	r0, #29
 80008c2:	f000 fa3c 	bl	8000d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80008c6:	bf00      	nop
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40000400 	.word	0x40000400
 80008d4:	40023800 	.word	0x40023800

080008d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a1d      	ldr	r2, [pc, #116]	; (800096c <HAL_UART_MspInit+0x94>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d133      	bne.n	8000962 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <HAL_UART_MspInit+0x98>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	4a1b      	ldr	r2, [pc, #108]	; (8000970 <HAL_UART_MspInit+0x98>)
 8000904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000908:	6413      	str	r3, [r2, #64]	; 0x40
 800090a:	4b19      	ldr	r3, [pc, #100]	; (8000970 <HAL_UART_MspInit+0x98>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <HAL_UART_MspInit+0x98>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a14      	ldr	r2, [pc, #80]	; (8000970 <HAL_UART_MspInit+0x98>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b12      	ldr	r3, [pc, #72]	; (8000970 <HAL_UART_MspInit+0x98>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000932:	230c      	movs	r3, #12
 8000934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000942:	2307      	movs	r3, #7
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4619      	mov	r1, r3
 800094c:	4809      	ldr	r0, [pc, #36]	; (8000974 <HAL_UART_MspInit+0x9c>)
 800094e:	f000 faa3 	bl	8000e98 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	2026      	movs	r0, #38	; 0x26
 8000958:	f000 f9d5 	bl	8000d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800095c:	2026      	movs	r0, #38	; 0x26
 800095e:	f000 f9ee 	bl	8000d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000962:	bf00      	nop
 8000964:	3728      	adds	r7, #40	; 0x28
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40004400 	.word	0x40004400
 8000970:	40023800 	.word	0x40023800
 8000974:	40020000 	.word	0x40020000

08000978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800097c:	e7fe      	b.n	800097c <NMI_Handler+0x4>

0800097e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <HardFault_Handler+0x4>

08000984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <MemManage_Handler+0x4>

0800098a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <BusFault_Handler+0x4>

08000990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <UsageFault_Handler+0x4>

08000996 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c4:	f000 f8a4 	bl	8000b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}

080009cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80009d0:	4802      	ldr	r0, [pc, #8]	; (80009dc <TIM3_IRQHandler+0x10>)
 80009d2:	f001 f93f 	bl	8001c54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	2000002c 	.word	0x2000002c

080009e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009e4:	4802      	ldr	r0, [pc, #8]	; (80009f0 <USART2_IRQHandler+0x10>)
 80009e6:	f001 fdd9 	bl	800259c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000080 	.word	0x20000080

080009f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <SystemInit+0x20>)
 80009fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009fe:	4a05      	ldr	r2, [pc, #20]	; (8000a14 <SystemInit+0x20>)
 8000a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a1c:	480d      	ldr	r0, [pc, #52]	; (8000a54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a1e:	490e      	ldr	r1, [pc, #56]	; (8000a58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a20:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a24:	e002      	b.n	8000a2c <LoopCopyDataInit>

08000a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2a:	3304      	adds	r3, #4

08000a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a30:	d3f9      	bcc.n	8000a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a32:	4a0b      	ldr	r2, [pc, #44]	; (8000a60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a34:	4c0b      	ldr	r4, [pc, #44]	; (8000a64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a38:	e001      	b.n	8000a3e <LoopFillZerobss>

08000a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a3c:	3204      	adds	r2, #4

08000a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a40:	d3fb      	bcc.n	8000a3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a42:	f7ff ffd7 	bl	80009f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a46:	f002 fc61 	bl	800330c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a4a:	f7ff fd71 	bl	8000530 <main>
  bx  lr    
 8000a4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a50:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a58:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a5c:	080033a4 	.word	0x080033a4
  ldr r2, =_sbss
 8000a60:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a64:	200000c8 	.word	0x200000c8

08000a68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a68:	e7fe      	b.n	8000a68 <ADC_IRQHandler>
	...

08000a6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a70:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <HAL_Init+0x40>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a0d      	ldr	r2, [pc, #52]	; (8000aac <HAL_Init+0x40>)
 8000a76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a7c:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <HAL_Init+0x40>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <HAL_Init+0x40>)
 8000a82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <HAL_Init+0x40>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a07      	ldr	r2, [pc, #28]	; (8000aac <HAL_Init+0x40>)
 8000a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a94:	2003      	movs	r0, #3
 8000a96:	f000 f92b 	bl	8000cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f000 f808 	bl	8000ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa0:	f7ff feca 	bl	8000838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40023c00 	.word	0x40023c00

08000ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <HAL_InitTick+0x54>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <HAL_InitTick+0x58>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f000 f943 	bl	8000d5a <HAL_SYSTICK_Config>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	e00e      	b.n	8000afc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2b0f      	cmp	r3, #15
 8000ae2:	d80a      	bhi.n	8000afa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aec:	f000 f90b 	bl	8000d06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af0:	4a06      	ldr	r2, [pc, #24]	; (8000b0c <HAL_InitTick+0x5c>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000af6:	2300      	movs	r3, #0
 8000af8:	e000      	b.n	8000afc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000004 	.word	0x20000004
 8000b08:	2000000c 	.word	0x2000000c
 8000b0c:	20000008 	.word	0x20000008

08000b10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_IncTick+0x20>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	461a      	mov	r2, r3
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_IncTick+0x24>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4413      	add	r3, r2
 8000b20:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <HAL_IncTick+0x24>)
 8000b22:	6013      	str	r3, [r2, #0]
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	2000000c 	.word	0x2000000c
 8000b34:	200000c4 	.word	0x200000c4

08000b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b3c:	4b03      	ldr	r3, [pc, #12]	; (8000b4c <HAL_GetTick+0x14>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	200000c4 	.word	0x200000c4

08000b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <__NVIC_SetPriorityGrouping+0x44>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b82:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <__NVIC_SetPriorityGrouping+0x44>)
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	60d3      	str	r3, [r2, #12]
}
 8000b88:	bf00      	nop
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	0a1b      	lsrs	r3, r3, #8
 8000ba2:	f003 0307 	and.w	r3, r3, #7
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	db0b      	blt.n	8000bde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	f003 021f 	and.w	r2, r3, #31
 8000bcc:	4907      	ldr	r1, [pc, #28]	; (8000bec <__NVIC_EnableIRQ+0x38>)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	095b      	lsrs	r3, r3, #5
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000e100 	.word	0xe000e100

08000bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	6039      	str	r1, [r7, #0]
 8000bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	db0a      	blt.n	8000c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	490c      	ldr	r1, [pc, #48]	; (8000c3c <__NVIC_SetPriority+0x4c>)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	0112      	lsls	r2, r2, #4
 8000c10:	b2d2      	uxtb	r2, r2
 8000c12:	440b      	add	r3, r1
 8000c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c18:	e00a      	b.n	8000c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	4908      	ldr	r1, [pc, #32]	; (8000c40 <__NVIC_SetPriority+0x50>)
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	f003 030f 	and.w	r3, r3, #15
 8000c26:	3b04      	subs	r3, #4
 8000c28:	0112      	lsls	r2, r2, #4
 8000c2a:	b2d2      	uxtb	r2, r2
 8000c2c:	440b      	add	r3, r1
 8000c2e:	761a      	strb	r2, [r3, #24]
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000e100 	.word	0xe000e100
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b089      	sub	sp, #36	; 0x24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	f1c3 0307 	rsb	r3, r3, #7
 8000c5e:	2b04      	cmp	r3, #4
 8000c60:	bf28      	it	cs
 8000c62:	2304      	movcs	r3, #4
 8000c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3304      	adds	r3, #4
 8000c6a:	2b06      	cmp	r3, #6
 8000c6c:	d902      	bls.n	8000c74 <NVIC_EncodePriority+0x30>
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3b03      	subs	r3, #3
 8000c72:	e000      	b.n	8000c76 <NVIC_EncodePriority+0x32>
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c78:	f04f 32ff 	mov.w	r2, #4294967295
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43da      	mvns	r2, r3
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	401a      	ands	r2, r3
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	fa01 f303 	lsl.w	r3, r1, r3
 8000c96:	43d9      	mvns	r1, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c9c:	4313      	orrs	r3, r2
         );
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3724      	adds	r7, #36	; 0x24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
	...

08000cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cbc:	d301      	bcc.n	8000cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e00f      	b.n	8000ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <SysTick_Config+0x40>)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cca:	210f      	movs	r1, #15
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd0:	f7ff ff8e 	bl	8000bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <SysTick_Config+0x40>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cda:	4b04      	ldr	r3, [pc, #16]	; (8000cec <SysTick_Config+0x40>)
 8000cdc:	2207      	movs	r2, #7
 8000cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	e000e010 	.word	0xe000e010

08000cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f7ff ff29 	bl	8000b50 <__NVIC_SetPriorityGrouping>
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b086      	sub	sp, #24
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	60b9      	str	r1, [r7, #8]
 8000d10:	607a      	str	r2, [r7, #4]
 8000d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d18:	f7ff ff3e 	bl	8000b98 <__NVIC_GetPriorityGrouping>
 8000d1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	68b9      	ldr	r1, [r7, #8]
 8000d22:	6978      	ldr	r0, [r7, #20]
 8000d24:	f7ff ff8e 	bl	8000c44 <NVIC_EncodePriority>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2e:	4611      	mov	r1, r2
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ff5d 	bl	8000bf0 <__NVIC_SetPriority>
}
 8000d36:	bf00      	nop
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	4603      	mov	r3, r0
 8000d46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ff31 	bl	8000bb4 <__NVIC_EnableIRQ>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f7ff ffa2 	bl	8000cac <SysTick_Config>
 8000d68:	4603      	mov	r3, r0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b084      	sub	sp, #16
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d80:	f7ff feda 	bl	8000b38 <HAL_GetTick>
 8000d84:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d008      	beq.n	8000da4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2280      	movs	r2, #128	; 0x80
 8000d96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	e052      	b.n	8000e4a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f022 0216 	bic.w	r2, r2, #22
 8000db2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	695a      	ldr	r2, [r3, #20]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000dc2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d103      	bne.n	8000dd4 <HAL_DMA_Abort+0x62>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d007      	beq.n	8000de4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f022 0208 	bic.w	r2, r2, #8
 8000de2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f022 0201 	bic.w	r2, r2, #1
 8000df2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000df4:	e013      	b.n	8000e1e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000df6:	f7ff fe9f 	bl	8000b38 <HAL_GetTick>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	2b05      	cmp	r3, #5
 8000e02:	d90c      	bls.n	8000e1e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2220      	movs	r2, #32
 8000e08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	e015      	b.n	8000e4a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d1e4      	bne.n	8000df6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e30:	223f      	movs	r2, #63	; 0x3f
 8000e32:	409a      	lsls	r2, r3
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d004      	beq.n	8000e70 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2280      	movs	r2, #128	; 0x80
 8000e6a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e00c      	b.n	8000e8a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2205      	movs	r2, #5
 8000e74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f022 0201 	bic.w	r2, r2, #1
 8000e86:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
	...

08000e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b089      	sub	sp, #36	; 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
 8000eb2:	e159      	b.n	8001168 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	697a      	ldr	r2, [r7, #20]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	f040 8148 	bne.w	8001162 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d005      	beq.n	8000eea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d130      	bne.n	8000f4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	68da      	ldr	r2, [r3, #12]
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f20:	2201      	movs	r2, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	091b      	lsrs	r3, r3, #4
 8000f36:	f003 0201 	and.w	r2, r3, #1
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0303 	and.w	r3, r3, #3
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d017      	beq.n	8000f88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d123      	bne.n	8000fdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	08da      	lsrs	r2, r3, #3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3208      	adds	r2, #8
 8000f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	220f      	movs	r2, #15
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	691a      	ldr	r2, [r3, #16]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	08da      	lsrs	r2, r3, #3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3208      	adds	r2, #8
 8000fd6:	69b9      	ldr	r1, [r7, #24]
 8000fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0203 	and.w	r2, r3, #3
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001018:	2b00      	cmp	r3, #0
 800101a:	f000 80a2 	beq.w	8001162 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b57      	ldr	r3, [pc, #348]	; (8001180 <HAL_GPIO_Init+0x2e8>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	4a56      	ldr	r2, [pc, #344]	; (8001180 <HAL_GPIO_Init+0x2e8>)
 8001028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102c:	6453      	str	r3, [r2, #68]	; 0x44
 800102e:	4b54      	ldr	r3, [pc, #336]	; (8001180 <HAL_GPIO_Init+0x2e8>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800103a:	4a52      	ldr	r2, [pc, #328]	; (8001184 <HAL_GPIO_Init+0x2ec>)
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	089b      	lsrs	r3, r3, #2
 8001040:	3302      	adds	r3, #2
 8001042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	220f      	movs	r2, #15
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a49      	ldr	r2, [pc, #292]	; (8001188 <HAL_GPIO_Init+0x2f0>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d019      	beq.n	800109a <HAL_GPIO_Init+0x202>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a48      	ldr	r2, [pc, #288]	; (800118c <HAL_GPIO_Init+0x2f4>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d013      	beq.n	8001096 <HAL_GPIO_Init+0x1fe>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a47      	ldr	r2, [pc, #284]	; (8001190 <HAL_GPIO_Init+0x2f8>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d00d      	beq.n	8001092 <HAL_GPIO_Init+0x1fa>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a46      	ldr	r2, [pc, #280]	; (8001194 <HAL_GPIO_Init+0x2fc>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d007      	beq.n	800108e <HAL_GPIO_Init+0x1f6>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a45      	ldr	r2, [pc, #276]	; (8001198 <HAL_GPIO_Init+0x300>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d101      	bne.n	800108a <HAL_GPIO_Init+0x1f2>
 8001086:	2304      	movs	r3, #4
 8001088:	e008      	b.n	800109c <HAL_GPIO_Init+0x204>
 800108a:	2307      	movs	r3, #7
 800108c:	e006      	b.n	800109c <HAL_GPIO_Init+0x204>
 800108e:	2303      	movs	r3, #3
 8001090:	e004      	b.n	800109c <HAL_GPIO_Init+0x204>
 8001092:	2302      	movs	r3, #2
 8001094:	e002      	b.n	800109c <HAL_GPIO_Init+0x204>
 8001096:	2301      	movs	r3, #1
 8001098:	e000      	b.n	800109c <HAL_GPIO_Init+0x204>
 800109a:	2300      	movs	r3, #0
 800109c:	69fa      	ldr	r2, [r7, #28]
 800109e:	f002 0203 	and.w	r2, r2, #3
 80010a2:	0092      	lsls	r2, r2, #2
 80010a4:	4093      	lsls	r3, r2
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010ac:	4935      	ldr	r1, [pc, #212]	; (8001184 <HAL_GPIO_Init+0x2ec>)
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	089b      	lsrs	r3, r3, #2
 80010b2:	3302      	adds	r3, #2
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ba:	4b38      	ldr	r3, [pc, #224]	; (800119c <HAL_GPIO_Init+0x304>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010de:	4a2f      	ldr	r2, [pc, #188]	; (800119c <HAL_GPIO_Init+0x304>)
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010e4:	4b2d      	ldr	r3, [pc, #180]	; (800119c <HAL_GPIO_Init+0x304>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001108:	4a24      	ldr	r2, [pc, #144]	; (800119c <HAL_GPIO_Init+0x304>)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800110e:	4b23      	ldr	r3, [pc, #140]	; (800119c <HAL_GPIO_Init+0x304>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001132:	4a1a      	ldr	r2, [pc, #104]	; (800119c <HAL_GPIO_Init+0x304>)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001138:	4b18      	ldr	r3, [pc, #96]	; (800119c <HAL_GPIO_Init+0x304>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800115c:	4a0f      	ldr	r2, [pc, #60]	; (800119c <HAL_GPIO_Init+0x304>)
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3301      	adds	r3, #1
 8001166:	61fb      	str	r3, [r7, #28]
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	2b0f      	cmp	r3, #15
 800116c:	f67f aea2 	bls.w	8000eb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	3724      	adds	r7, #36	; 0x24
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800
 8001184:	40013800 	.word	0x40013800
 8001188:	40020000 	.word	0x40020000
 800118c:	40020400 	.word	0x40020400
 8001190:	40020800 	.word	0x40020800
 8001194:	40020c00 	.word	0x40020c00
 8001198:	40021000 	.word	0x40021000
 800119c:	40013c00 	.word	0x40013c00

080011a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	807b      	strh	r3, [r7, #2]
 80011ac:	4613      	mov	r3, r2
 80011ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b0:	787b      	ldrb	r3, [r7, #1]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011b6:	887a      	ldrh	r2, [r7, #2]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011bc:	e003      	b.n	80011c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011be:	887b      	ldrh	r3, [r7, #2]
 80011c0:	041a      	lsls	r2, r3, #16
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	619a      	str	r2, [r3, #24]
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b085      	sub	sp, #20
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	460b      	mov	r3, r1
 80011dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011e4:	887a      	ldrh	r2, [r7, #2]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4013      	ands	r3, r2
 80011ea:	041a      	lsls	r2, r3, #16
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	887b      	ldrh	r3, [r7, #2]
 80011f2:	400b      	ands	r3, r1
 80011f4:	431a      	orrs	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	619a      	str	r2, [r3, #24]
}
 80011fa:	bf00      	nop
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
	...

08001208 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e264      	b.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	2b00      	cmp	r3, #0
 8001224:	d075      	beq.n	8001312 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001226:	4ba3      	ldr	r3, [pc, #652]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 030c 	and.w	r3, r3, #12
 800122e:	2b04      	cmp	r3, #4
 8001230:	d00c      	beq.n	800124c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001232:	4ba0      	ldr	r3, [pc, #640]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800123a:	2b08      	cmp	r3, #8
 800123c:	d112      	bne.n	8001264 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800123e:	4b9d      	ldr	r3, [pc, #628]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001246:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800124a:	d10b      	bne.n	8001264 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124c:	4b99      	ldr	r3, [pc, #612]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d05b      	beq.n	8001310 <HAL_RCC_OscConfig+0x108>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d157      	bne.n	8001310 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e23f      	b.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800126c:	d106      	bne.n	800127c <HAL_RCC_OscConfig+0x74>
 800126e:	4b91      	ldr	r3, [pc, #580]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a90      	ldr	r2, [pc, #576]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 8001274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	e01d      	b.n	80012b8 <HAL_RCC_OscConfig+0xb0>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001284:	d10c      	bne.n	80012a0 <HAL_RCC_OscConfig+0x98>
 8001286:	4b8b      	ldr	r3, [pc, #556]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a8a      	ldr	r2, [pc, #552]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 800128c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	4b88      	ldr	r3, [pc, #544]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a87      	ldr	r2, [pc, #540]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 8001298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	e00b      	b.n	80012b8 <HAL_RCC_OscConfig+0xb0>
 80012a0:	4b84      	ldr	r3, [pc, #528]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a83      	ldr	r2, [pc, #524]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 80012a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012aa:	6013      	str	r3, [r2, #0]
 80012ac:	4b81      	ldr	r3, [pc, #516]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a80      	ldr	r2, [pc, #512]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 80012b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d013      	beq.n	80012e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c0:	f7ff fc3a 	bl	8000b38 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c8:	f7ff fc36 	bl	8000b38 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b64      	cmp	r3, #100	; 0x64
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e204      	b.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012da:	4b76      	ldr	r3, [pc, #472]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0f0      	beq.n	80012c8 <HAL_RCC_OscConfig+0xc0>
 80012e6:	e014      	b.n	8001312 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fc26 	bl	8000b38 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f0:	f7ff fc22 	bl	8000b38 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b64      	cmp	r3, #100	; 0x64
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e1f0      	b.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001302:	4b6c      	ldr	r3, [pc, #432]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1f0      	bne.n	80012f0 <HAL_RCC_OscConfig+0xe8>
 800130e:	e000      	b.n	8001312 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d063      	beq.n	80013e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800131e:	4b65      	ldr	r3, [pc, #404]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 030c 	and.w	r3, r3, #12
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00b      	beq.n	8001342 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800132a:	4b62      	ldr	r3, [pc, #392]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001332:	2b08      	cmp	r3, #8
 8001334:	d11c      	bne.n	8001370 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001336:	4b5f      	ldr	r3, [pc, #380]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d116      	bne.n	8001370 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001342:	4b5c      	ldr	r3, [pc, #368]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d005      	beq.n	800135a <HAL_RCC_OscConfig+0x152>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d001      	beq.n	800135a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e1c4      	b.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135a:	4b56      	ldr	r3, [pc, #344]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	4952      	ldr	r1, [pc, #328]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 800136a:	4313      	orrs	r3, r2
 800136c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136e:	e03a      	b.n	80013e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d020      	beq.n	80013ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001378:	4b4f      	ldr	r3, [pc, #316]	; (80014b8 <HAL_RCC_OscConfig+0x2b0>)
 800137a:	2201      	movs	r2, #1
 800137c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137e:	f7ff fbdb 	bl	8000b38 <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001386:	f7ff fbd7 	bl	8000b38 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e1a5      	b.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001398:	4b46      	ldr	r3, [pc, #280]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0f0      	beq.n	8001386 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a4:	4b43      	ldr	r3, [pc, #268]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	4940      	ldr	r1, [pc, #256]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 80013b4:	4313      	orrs	r3, r2
 80013b6:	600b      	str	r3, [r1, #0]
 80013b8:	e015      	b.n	80013e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ba:	4b3f      	ldr	r3, [pc, #252]	; (80014b8 <HAL_RCC_OscConfig+0x2b0>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c0:	f7ff fbba 	bl	8000b38 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c8:	f7ff fbb6 	bl	8000b38 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e184      	b.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013da:	4b36      	ldr	r3, [pc, #216]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0308 	and.w	r3, r3, #8
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d030      	beq.n	8001454 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d016      	beq.n	8001428 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013fa:	4b30      	ldr	r3, [pc, #192]	; (80014bc <HAL_RCC_OscConfig+0x2b4>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001400:	f7ff fb9a 	bl	8000b38 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001408:	f7ff fb96 	bl	8000b38 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e164      	b.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141a:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 800141c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f0      	beq.n	8001408 <HAL_RCC_OscConfig+0x200>
 8001426:	e015      	b.n	8001454 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001428:	4b24      	ldr	r3, [pc, #144]	; (80014bc <HAL_RCC_OscConfig+0x2b4>)
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800142e:	f7ff fb83 	bl	8000b38 <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001436:	f7ff fb7f 	bl	8000b38 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e14d      	b.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001448:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 800144a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1f0      	bne.n	8001436 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 80a0 	beq.w	80015a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001466:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d10f      	bne.n	8001492 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	4a0e      	ldr	r2, [pc, #56]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 800147c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001480:	6413      	str	r3, [r2, #64]	; 0x40
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <HAL_RCC_OscConfig+0x2ac>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800148e:	2301      	movs	r3, #1
 8001490:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <HAL_RCC_OscConfig+0x2b8>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149a:	2b00      	cmp	r3, #0
 800149c:	d121      	bne.n	80014e2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <HAL_RCC_OscConfig+0x2b8>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a07      	ldr	r2, [pc, #28]	; (80014c0 <HAL_RCC_OscConfig+0x2b8>)
 80014a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014aa:	f7ff fb45 	bl	8000b38 <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b0:	e011      	b.n	80014d6 <HAL_RCC_OscConfig+0x2ce>
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800
 80014b8:	42470000 	.word	0x42470000
 80014bc:	42470e80 	.word	0x42470e80
 80014c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c4:	f7ff fb38 	bl	8000b38 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e106      	b.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d6:	4b85      	ldr	r3, [pc, #532]	; (80016ec <HAL_RCC_OscConfig+0x4e4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0f0      	beq.n	80014c4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d106      	bne.n	80014f8 <HAL_RCC_OscConfig+0x2f0>
 80014ea:	4b81      	ldr	r3, [pc, #516]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 80014ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ee:	4a80      	ldr	r2, [pc, #512]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6713      	str	r3, [r2, #112]	; 0x70
 80014f6:	e01c      	b.n	8001532 <HAL_RCC_OscConfig+0x32a>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	2b05      	cmp	r3, #5
 80014fe:	d10c      	bne.n	800151a <HAL_RCC_OscConfig+0x312>
 8001500:	4b7b      	ldr	r3, [pc, #492]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 8001502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001504:	4a7a      	ldr	r2, [pc, #488]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 8001506:	f043 0304 	orr.w	r3, r3, #4
 800150a:	6713      	str	r3, [r2, #112]	; 0x70
 800150c:	4b78      	ldr	r3, [pc, #480]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 800150e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001510:	4a77      	ldr	r2, [pc, #476]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6713      	str	r3, [r2, #112]	; 0x70
 8001518:	e00b      	b.n	8001532 <HAL_RCC_OscConfig+0x32a>
 800151a:	4b75      	ldr	r3, [pc, #468]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 800151c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151e:	4a74      	ldr	r2, [pc, #464]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 8001520:	f023 0301 	bic.w	r3, r3, #1
 8001524:	6713      	str	r3, [r2, #112]	; 0x70
 8001526:	4b72      	ldr	r3, [pc, #456]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 8001528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152a:	4a71      	ldr	r2, [pc, #452]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 800152c:	f023 0304 	bic.w	r3, r3, #4
 8001530:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d015      	beq.n	8001566 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800153a:	f7ff fafd 	bl	8000b38 <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001540:	e00a      	b.n	8001558 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001542:	f7ff faf9 	bl	8000b38 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001550:	4293      	cmp	r3, r2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e0c5      	b.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001558:	4b65      	ldr	r3, [pc, #404]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 800155a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0ee      	beq.n	8001542 <HAL_RCC_OscConfig+0x33a>
 8001564:	e014      	b.n	8001590 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001566:	f7ff fae7 	bl	8000b38 <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800156c:	e00a      	b.n	8001584 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800156e:	f7ff fae3 	bl	8000b38 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	f241 3288 	movw	r2, #5000	; 0x1388
 800157c:	4293      	cmp	r3, r2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e0af      	b.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001584:	4b5a      	ldr	r3, [pc, #360]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 8001586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1ee      	bne.n	800156e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001590:	7dfb      	ldrb	r3, [r7, #23]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d105      	bne.n	80015a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001596:	4b56      	ldr	r3, [pc, #344]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	4a55      	ldr	r2, [pc, #340]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 800159c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f000 809b 	beq.w	80016e2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015ac:	4b50      	ldr	r3, [pc, #320]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f003 030c 	and.w	r3, r3, #12
 80015b4:	2b08      	cmp	r3, #8
 80015b6:	d05c      	beq.n	8001672 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d141      	bne.n	8001644 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c0:	4b4c      	ldr	r3, [pc, #304]	; (80016f4 <HAL_RCC_OscConfig+0x4ec>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c6:	f7ff fab7 	bl	8000b38 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ce:	f7ff fab3 	bl	8000b38 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e081      	b.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e0:	4b43      	ldr	r3, [pc, #268]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1f0      	bne.n	80015ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69da      	ldr	r2, [r3, #28]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a1b      	ldr	r3, [r3, #32]
 80015f4:	431a      	orrs	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fa:	019b      	lsls	r3, r3, #6
 80015fc:	431a      	orrs	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001602:	085b      	lsrs	r3, r3, #1
 8001604:	3b01      	subs	r3, #1
 8001606:	041b      	lsls	r3, r3, #16
 8001608:	431a      	orrs	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160e:	061b      	lsls	r3, r3, #24
 8001610:	4937      	ldr	r1, [pc, #220]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 8001612:	4313      	orrs	r3, r2
 8001614:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001616:	4b37      	ldr	r3, [pc, #220]	; (80016f4 <HAL_RCC_OscConfig+0x4ec>)
 8001618:	2201      	movs	r2, #1
 800161a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161c:	f7ff fa8c 	bl	8000b38 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001624:	f7ff fa88 	bl	8000b38 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e056      	b.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001636:	4b2e      	ldr	r3, [pc, #184]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0f0      	beq.n	8001624 <HAL_RCC_OscConfig+0x41c>
 8001642:	e04e      	b.n	80016e2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001644:	4b2b      	ldr	r3, [pc, #172]	; (80016f4 <HAL_RCC_OscConfig+0x4ec>)
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164a:	f7ff fa75 	bl	8000b38 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001652:	f7ff fa71 	bl	8000b38 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e03f      	b.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001664:	4b22      	ldr	r3, [pc, #136]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1f0      	bne.n	8001652 <HAL_RCC_OscConfig+0x44a>
 8001670:	e037      	b.n	80016e2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d101      	bne.n	800167e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e032      	b.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800167e:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <HAL_RCC_OscConfig+0x4e8>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d028      	beq.n	80016de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001696:	429a      	cmp	r2, r3
 8001698:	d121      	bne.n	80016de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d11a      	bne.n	80016de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016ae:	4013      	ands	r3, r2
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016b4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d111      	bne.n	80016de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c4:	085b      	lsrs	r3, r3, #1
 80016c6:	3b01      	subs	r3, #1
 80016c8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d107      	bne.n	80016de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016da:	429a      	cmp	r2, r3
 80016dc:	d001      	beq.n	80016e2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40007000 	.word	0x40007000
 80016f0:	40023800 	.word	0x40023800
 80016f4:	42470060 	.word	0x42470060

080016f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e0cc      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800170c:	4b68      	ldr	r3, [pc, #416]	; (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d90c      	bls.n	8001734 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171a:	4b65      	ldr	r3, [pc, #404]	; (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001722:	4b63      	ldr	r3, [pc, #396]	; (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d001      	beq.n	8001734 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e0b8      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d020      	beq.n	8001782 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800174c:	4b59      	ldr	r3, [pc, #356]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	4a58      	ldr	r2, [pc, #352]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001756:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	2b00      	cmp	r3, #0
 8001762:	d005      	beq.n	8001770 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001764:	4b53      	ldr	r3, [pc, #332]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	4a52      	ldr	r2, [pc, #328]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800176e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001770:	4b50      	ldr	r3, [pc, #320]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	494d      	ldr	r1, [pc, #308]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	4313      	orrs	r3, r2
 8001780:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d044      	beq.n	8001818 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d107      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001796:	4b47      	ldr	r3, [pc, #284]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d119      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e07f      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d003      	beq.n	80017b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017b2:	2b03      	cmp	r3, #3
 80017b4:	d107      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b6:	4b3f      	ldr	r3, [pc, #252]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d109      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e06f      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c6:	4b3b      	ldr	r3, [pc, #236]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e067      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017d6:	4b37      	ldr	r3, [pc, #220]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f023 0203 	bic.w	r2, r3, #3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	4934      	ldr	r1, [pc, #208]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e8:	f7ff f9a6 	bl	8000b38 <HAL_GetTick>
 80017ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ee:	e00a      	b.n	8001806 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f0:	f7ff f9a2 	bl	8000b38 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fe:	4293      	cmp	r3, r2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e04f      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001806:	4b2b      	ldr	r3, [pc, #172]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f003 020c 	and.w	r2, r3, #12
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	429a      	cmp	r2, r3
 8001816:	d1eb      	bne.n	80017f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001818:	4b25      	ldr	r3, [pc, #148]	; (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	429a      	cmp	r2, r3
 8001824:	d20c      	bcs.n	8001840 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001826:	4b22      	ldr	r3, [pc, #136]	; (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800182e:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	429a      	cmp	r2, r3
 800183a:	d001      	beq.n	8001840 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e032      	b.n	80018a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	d008      	beq.n	800185e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800184c:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	4916      	ldr	r1, [pc, #88]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	4313      	orrs	r3, r2
 800185c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b00      	cmp	r3, #0
 8001868:	d009      	beq.n	800187e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800186a:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	490e      	ldr	r1, [pc, #56]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	4313      	orrs	r3, r2
 800187c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800187e:	f000 f821 	bl	80018c4 <HAL_RCC_GetSysClockFreq>
 8001882:	4602      	mov	r2, r0
 8001884:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	091b      	lsrs	r3, r3, #4
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	490a      	ldr	r1, [pc, #40]	; (80018b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001890:	5ccb      	ldrb	r3, [r1, r3]
 8001892:	fa22 f303 	lsr.w	r3, r2, r3
 8001896:	4a09      	ldr	r2, [pc, #36]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 8001898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <HAL_RCC_ClockConfig+0x1c8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff f906 	bl	8000ab0 <HAL_InitTick>

  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40023c00 	.word	0x40023c00
 80018b4:	40023800 	.word	0x40023800
 80018b8:	0800337c 	.word	0x0800337c
 80018bc:	20000004 	.word	0x20000004
 80018c0:	20000008 	.word	0x20000008

080018c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018c8:	b084      	sub	sp, #16
 80018ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	2300      	movs	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	2300      	movs	r3, #0
 80018d6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80018d8:	2300      	movs	r3, #0
 80018da:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018dc:	4b67      	ldr	r3, [pc, #412]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 030c 	and.w	r3, r3, #12
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	d00d      	beq.n	8001904 <HAL_RCC_GetSysClockFreq+0x40>
 80018e8:	2b08      	cmp	r3, #8
 80018ea:	f200 80bd 	bhi.w	8001a68 <HAL_RCC_GetSysClockFreq+0x1a4>
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d002      	beq.n	80018f8 <HAL_RCC_GetSysClockFreq+0x34>
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	d003      	beq.n	80018fe <HAL_RCC_GetSysClockFreq+0x3a>
 80018f6:	e0b7      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018f8:	4b61      	ldr	r3, [pc, #388]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80018fa:	60bb      	str	r3, [r7, #8]
       break;
 80018fc:	e0b7      	b.n	8001a6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018fe:	4b61      	ldr	r3, [pc, #388]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001900:	60bb      	str	r3, [r7, #8]
      break;
 8001902:	e0b4      	b.n	8001a6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001904:	4b5d      	ldr	r3, [pc, #372]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800190c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800190e:	4b5b      	ldr	r3, [pc, #364]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d04d      	beq.n	80019b6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800191a:	4b58      	ldr	r3, [pc, #352]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	099b      	lsrs	r3, r3, #6
 8001920:	461a      	mov	r2, r3
 8001922:	f04f 0300 	mov.w	r3, #0
 8001926:	f240 10ff 	movw	r0, #511	; 0x1ff
 800192a:	f04f 0100 	mov.w	r1, #0
 800192e:	ea02 0800 	and.w	r8, r2, r0
 8001932:	ea03 0901 	and.w	r9, r3, r1
 8001936:	4640      	mov	r0, r8
 8001938:	4649      	mov	r1, r9
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	014b      	lsls	r3, r1, #5
 8001944:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001948:	0142      	lsls	r2, r0, #5
 800194a:	4610      	mov	r0, r2
 800194c:	4619      	mov	r1, r3
 800194e:	ebb0 0008 	subs.w	r0, r0, r8
 8001952:	eb61 0109 	sbc.w	r1, r1, r9
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	018b      	lsls	r3, r1, #6
 8001960:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001964:	0182      	lsls	r2, r0, #6
 8001966:	1a12      	subs	r2, r2, r0
 8001968:	eb63 0301 	sbc.w	r3, r3, r1
 800196c:	f04f 0000 	mov.w	r0, #0
 8001970:	f04f 0100 	mov.w	r1, #0
 8001974:	00d9      	lsls	r1, r3, #3
 8001976:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800197a:	00d0      	lsls	r0, r2, #3
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	eb12 0208 	adds.w	r2, r2, r8
 8001984:	eb43 0309 	adc.w	r3, r3, r9
 8001988:	f04f 0000 	mov.w	r0, #0
 800198c:	f04f 0100 	mov.w	r1, #0
 8001990:	0259      	lsls	r1, r3, #9
 8001992:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001996:	0250      	lsls	r0, r2, #9
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4610      	mov	r0, r2
 800199e:	4619      	mov	r1, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	461a      	mov	r2, r3
 80019a4:	f04f 0300 	mov.w	r3, #0
 80019a8:	f7fe fc14 	bl	80001d4 <__aeabi_uldivmod>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4613      	mov	r3, r2
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	e04a      	b.n	8001a4c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b6:	4b31      	ldr	r3, [pc, #196]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	099b      	lsrs	r3, r3, #6
 80019bc:	461a      	mov	r2, r3
 80019be:	f04f 0300 	mov.w	r3, #0
 80019c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019c6:	f04f 0100 	mov.w	r1, #0
 80019ca:	ea02 0400 	and.w	r4, r2, r0
 80019ce:	ea03 0501 	and.w	r5, r3, r1
 80019d2:	4620      	mov	r0, r4
 80019d4:	4629      	mov	r1, r5
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	014b      	lsls	r3, r1, #5
 80019e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019e4:	0142      	lsls	r2, r0, #5
 80019e6:	4610      	mov	r0, r2
 80019e8:	4619      	mov	r1, r3
 80019ea:	1b00      	subs	r0, r0, r4
 80019ec:	eb61 0105 	sbc.w	r1, r1, r5
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	018b      	lsls	r3, r1, #6
 80019fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019fe:	0182      	lsls	r2, r0, #6
 8001a00:	1a12      	subs	r2, r2, r0
 8001a02:	eb63 0301 	sbc.w	r3, r3, r1
 8001a06:	f04f 0000 	mov.w	r0, #0
 8001a0a:	f04f 0100 	mov.w	r1, #0
 8001a0e:	00d9      	lsls	r1, r3, #3
 8001a10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a14:	00d0      	lsls	r0, r2, #3
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	1912      	adds	r2, r2, r4
 8001a1c:	eb45 0303 	adc.w	r3, r5, r3
 8001a20:	f04f 0000 	mov.w	r0, #0
 8001a24:	f04f 0100 	mov.w	r1, #0
 8001a28:	0299      	lsls	r1, r3, #10
 8001a2a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a2e:	0290      	lsls	r0, r2, #10
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4610      	mov	r0, r2
 8001a36:	4619      	mov	r1, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	f04f 0300 	mov.w	r3, #0
 8001a40:	f7fe fbc8 	bl	80001d4 <__aeabi_uldivmod>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4613      	mov	r3, r2
 8001a4a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	0c1b      	lsrs	r3, r3, #16
 8001a52:	f003 0303 	and.w	r3, r3, #3
 8001a56:	3301      	adds	r3, #1
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a64:	60bb      	str	r3, [r7, #8]
      break;
 8001a66:	e002      	b.n	8001a6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a6a:	60bb      	str	r3, [r7, #8]
      break;
 8001a6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a6e:	68bb      	ldr	r3, [r7, #8]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	00f42400 	.word	0x00f42400
 8001a84:	007a1200 	.word	0x007a1200

08001a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a8c:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20000004 	.word	0x20000004

08001aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001aa4:	f7ff fff0 	bl	8001a88 <HAL_RCC_GetHCLKFreq>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	0a9b      	lsrs	r3, r3, #10
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	4903      	ldr	r1, [pc, #12]	; (8001ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ab6:	5ccb      	ldrb	r3, [r1, r3]
 8001ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	0800338c 	.word	0x0800338c

08001ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001acc:	f7ff ffdc 	bl	8001a88 <HAL_RCC_GetHCLKFreq>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	0b5b      	lsrs	r3, r3, #13
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	4903      	ldr	r1, [pc, #12]	; (8001aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ade:	5ccb      	ldrb	r3, [r1, r3]
 8001ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	0800338c 	.word	0x0800338c

08001af0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e041      	b.n	8001b86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d106      	bne.n	8001b1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7fe feb6 	bl	8000888 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2202      	movs	r2, #2
 8001b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3304      	adds	r3, #4
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4610      	mov	r0, r2
 8001b30:	f000 fa88 	bl	8002044 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d001      	beq.n	8001ba8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e044      	b.n	8001c32 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2202      	movs	r2, #2
 8001bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68da      	ldr	r2, [r3, #12]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 0201 	orr.w	r2, r2, #1
 8001bbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a1e      	ldr	r2, [pc, #120]	; (8001c40 <HAL_TIM_Base_Start_IT+0xb0>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d018      	beq.n	8001bfc <HAL_TIM_Base_Start_IT+0x6c>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd2:	d013      	beq.n	8001bfc <HAL_TIM_Base_Start_IT+0x6c>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a1a      	ldr	r2, [pc, #104]	; (8001c44 <HAL_TIM_Base_Start_IT+0xb4>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d00e      	beq.n	8001bfc <HAL_TIM_Base_Start_IT+0x6c>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a19      	ldr	r2, [pc, #100]	; (8001c48 <HAL_TIM_Base_Start_IT+0xb8>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d009      	beq.n	8001bfc <HAL_TIM_Base_Start_IT+0x6c>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a17      	ldr	r2, [pc, #92]	; (8001c4c <HAL_TIM_Base_Start_IT+0xbc>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d004      	beq.n	8001bfc <HAL_TIM_Base_Start_IT+0x6c>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a16      	ldr	r2, [pc, #88]	; (8001c50 <HAL_TIM_Base_Start_IT+0xc0>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d111      	bne.n	8001c20 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2b06      	cmp	r3, #6
 8001c0c:	d010      	beq.n	8001c30 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f042 0201 	orr.w	r2, r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c1e:	e007      	b.n	8001c30 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 0201 	orr.w	r2, r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40010000 	.word	0x40010000
 8001c44:	40000400 	.word	0x40000400
 8001c48:	40000800 	.word	0x40000800
 8001c4c:	40000c00 	.word	0x40000c00
 8001c50:	40014000 	.word	0x40014000

08001c54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d122      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d11b      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f06f 0202 	mvn.w	r2, #2
 8001c80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f9b5 	bl	8002006 <HAL_TIM_IC_CaptureCallback>
 8001c9c:	e005      	b.n	8001caa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f9a7 	bl	8001ff2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f9b8 	bl	800201a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	f003 0304 	and.w	r3, r3, #4
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	d122      	bne.n	8001d04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b04      	cmp	r3, #4
 8001cca:	d11b      	bne.n	8001d04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f06f 0204 	mvn.w	r2, #4
 8001cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2202      	movs	r2, #2
 8001cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f98b 	bl	8002006 <HAL_TIM_IC_CaptureCallback>
 8001cf0:	e005      	b.n	8001cfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f97d 	bl	8001ff2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f98e 	bl	800201a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d122      	bne.n	8001d58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	f003 0308 	and.w	r3, r3, #8
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d11b      	bne.n	8001d58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f06f 0208 	mvn.w	r2, #8
 8001d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2204      	movs	r2, #4
 8001d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f961 	bl	8002006 <HAL_TIM_IC_CaptureCallback>
 8001d44:	e005      	b.n	8001d52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f953 	bl	8001ff2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f964 	bl	800201a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	f003 0310 	and.w	r3, r3, #16
 8001d62:	2b10      	cmp	r3, #16
 8001d64:	d122      	bne.n	8001dac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	f003 0310 	and.w	r3, r3, #16
 8001d70:	2b10      	cmp	r3, #16
 8001d72:	d11b      	bne.n	8001dac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f06f 0210 	mvn.w	r2, #16
 8001d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2208      	movs	r2, #8
 8001d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f937 	bl	8002006 <HAL_TIM_IC_CaptureCallback>
 8001d98:	e005      	b.n	8001da6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f929 	bl	8001ff2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f93a 	bl	800201a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d10e      	bne.n	8001dd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d107      	bne.n	8001dd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f06f 0201 	mvn.w	r2, #1
 8001dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7fe fb7a 	bl	80004cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de2:	2b80      	cmp	r3, #128	; 0x80
 8001de4:	d10e      	bne.n	8001e04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df0:	2b80      	cmp	r3, #128	; 0x80
 8001df2:	d107      	bne.n	8001e04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 fab2 	bl	8002368 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e0e:	2b40      	cmp	r3, #64	; 0x40
 8001e10:	d10e      	bne.n	8001e30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e1c:	2b40      	cmp	r3, #64	; 0x40
 8001e1e:	d107      	bne.n	8001e30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f8ff 	bl	800202e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	f003 0320 	and.w	r3, r3, #32
 8001e3a:	2b20      	cmp	r3, #32
 8001e3c:	d10e      	bne.n	8001e5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f003 0320 	and.w	r3, r3, #32
 8001e48:	2b20      	cmp	r3, #32
 8001e4a:	d107      	bne.n	8001e5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f06f 0220 	mvn.w	r2, #32
 8001e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 fa7c 	bl	8002354 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d101      	bne.n	8001e80 <HAL_TIM_ConfigClockSource+0x1c>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	e0b4      	b.n	8001fea <HAL_TIM_ConfigClockSource+0x186>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ea6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68ba      	ldr	r2, [r7, #8]
 8001eae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eb8:	d03e      	beq.n	8001f38 <HAL_TIM_ConfigClockSource+0xd4>
 8001eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ebe:	f200 8087 	bhi.w	8001fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8001ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ec6:	f000 8086 	beq.w	8001fd6 <HAL_TIM_ConfigClockSource+0x172>
 8001eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ece:	d87f      	bhi.n	8001fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8001ed0:	2b70      	cmp	r3, #112	; 0x70
 8001ed2:	d01a      	beq.n	8001f0a <HAL_TIM_ConfigClockSource+0xa6>
 8001ed4:	2b70      	cmp	r3, #112	; 0x70
 8001ed6:	d87b      	bhi.n	8001fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8001ed8:	2b60      	cmp	r3, #96	; 0x60
 8001eda:	d050      	beq.n	8001f7e <HAL_TIM_ConfigClockSource+0x11a>
 8001edc:	2b60      	cmp	r3, #96	; 0x60
 8001ede:	d877      	bhi.n	8001fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8001ee0:	2b50      	cmp	r3, #80	; 0x50
 8001ee2:	d03c      	beq.n	8001f5e <HAL_TIM_ConfigClockSource+0xfa>
 8001ee4:	2b50      	cmp	r3, #80	; 0x50
 8001ee6:	d873      	bhi.n	8001fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8001ee8:	2b40      	cmp	r3, #64	; 0x40
 8001eea:	d058      	beq.n	8001f9e <HAL_TIM_ConfigClockSource+0x13a>
 8001eec:	2b40      	cmp	r3, #64	; 0x40
 8001eee:	d86f      	bhi.n	8001fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8001ef0:	2b30      	cmp	r3, #48	; 0x30
 8001ef2:	d064      	beq.n	8001fbe <HAL_TIM_ConfigClockSource+0x15a>
 8001ef4:	2b30      	cmp	r3, #48	; 0x30
 8001ef6:	d86b      	bhi.n	8001fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8001ef8:	2b20      	cmp	r3, #32
 8001efa:	d060      	beq.n	8001fbe <HAL_TIM_ConfigClockSource+0x15a>
 8001efc:	2b20      	cmp	r3, #32
 8001efe:	d867      	bhi.n	8001fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d05c      	beq.n	8001fbe <HAL_TIM_ConfigClockSource+0x15a>
 8001f04:	2b10      	cmp	r3, #16
 8001f06:	d05a      	beq.n	8001fbe <HAL_TIM_ConfigClockSource+0x15a>
 8001f08:	e062      	b.n	8001fd0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6818      	ldr	r0, [r3, #0]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	6899      	ldr	r1, [r3, #8]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	f000 f98d 	bl	8002238 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	609a      	str	r2, [r3, #8]
      break;
 8001f36:	e04f      	b.n	8001fd8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6818      	ldr	r0, [r3, #0]
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	6899      	ldr	r1, [r3, #8]
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	f000 f976 	bl	8002238 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f5a:	609a      	str	r2, [r3, #8]
      break;
 8001f5c:	e03c      	b.n	8001fd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6818      	ldr	r0, [r3, #0]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	6859      	ldr	r1, [r3, #4]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	f000 f8ea 	bl	8002144 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2150      	movs	r1, #80	; 0x50
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 f943 	bl	8002202 <TIM_ITRx_SetConfig>
      break;
 8001f7c:	e02c      	b.n	8001fd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6818      	ldr	r0, [r3, #0]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	6859      	ldr	r1, [r3, #4]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	f000 f909 	bl	80021a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2160      	movs	r1, #96	; 0x60
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 f933 	bl	8002202 <TIM_ITRx_SetConfig>
      break;
 8001f9c:	e01c      	b.n	8001fd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6818      	ldr	r0, [r3, #0]
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	6859      	ldr	r1, [r3, #4]
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	461a      	mov	r2, r3
 8001fac:	f000 f8ca 	bl	8002144 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2140      	movs	r1, #64	; 0x40
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f000 f923 	bl	8002202 <TIM_ITRx_SetConfig>
      break;
 8001fbc:	e00c      	b.n	8001fd8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4610      	mov	r0, r2
 8001fca:	f000 f91a 	bl	8002202 <TIM_ITRx_SetConfig>
      break;
 8001fce:	e003      	b.n	8001fd8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8001fd4:	e000      	b.n	8001fd8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001fd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
	...

08002044 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a34      	ldr	r2, [pc, #208]	; (8002128 <TIM_Base_SetConfig+0xe4>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d00f      	beq.n	800207c <TIM_Base_SetConfig+0x38>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002062:	d00b      	beq.n	800207c <TIM_Base_SetConfig+0x38>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a31      	ldr	r2, [pc, #196]	; (800212c <TIM_Base_SetConfig+0xe8>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d007      	beq.n	800207c <TIM_Base_SetConfig+0x38>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a30      	ldr	r2, [pc, #192]	; (8002130 <TIM_Base_SetConfig+0xec>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d003      	beq.n	800207c <TIM_Base_SetConfig+0x38>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a2f      	ldr	r2, [pc, #188]	; (8002134 <TIM_Base_SetConfig+0xf0>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d108      	bne.n	800208e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002082:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	4313      	orrs	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a25      	ldr	r2, [pc, #148]	; (8002128 <TIM_Base_SetConfig+0xe4>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d01b      	beq.n	80020ce <TIM_Base_SetConfig+0x8a>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800209c:	d017      	beq.n	80020ce <TIM_Base_SetConfig+0x8a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a22      	ldr	r2, [pc, #136]	; (800212c <TIM_Base_SetConfig+0xe8>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d013      	beq.n	80020ce <TIM_Base_SetConfig+0x8a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a21      	ldr	r2, [pc, #132]	; (8002130 <TIM_Base_SetConfig+0xec>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d00f      	beq.n	80020ce <TIM_Base_SetConfig+0x8a>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a20      	ldr	r2, [pc, #128]	; (8002134 <TIM_Base_SetConfig+0xf0>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d00b      	beq.n	80020ce <TIM_Base_SetConfig+0x8a>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a1f      	ldr	r2, [pc, #124]	; (8002138 <TIM_Base_SetConfig+0xf4>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d007      	beq.n	80020ce <TIM_Base_SetConfig+0x8a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a1e      	ldr	r2, [pc, #120]	; (800213c <TIM_Base_SetConfig+0xf8>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d003      	beq.n	80020ce <TIM_Base_SetConfig+0x8a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a1d      	ldr	r2, [pc, #116]	; (8002140 <TIM_Base_SetConfig+0xfc>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d108      	bne.n	80020e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	4313      	orrs	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a08      	ldr	r2, [pc, #32]	; (8002128 <TIM_Base_SetConfig+0xe4>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d103      	bne.n	8002114 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	615a      	str	r2, [r3, #20]
}
 800211a:	bf00      	nop
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40010000 	.word	0x40010000
 800212c:	40000400 	.word	0x40000400
 8002130:	40000800 	.word	0x40000800
 8002134:	40000c00 	.word	0x40000c00
 8002138:	40014000 	.word	0x40014000
 800213c:	40014400 	.word	0x40014400
 8002140:	40014800 	.word	0x40014800

08002144 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002144:	b480      	push	{r7}
 8002146:	b087      	sub	sp, #28
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	f023 0201 	bic.w	r2, r3, #1
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800216e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	011b      	lsls	r3, r3, #4
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4313      	orrs	r3, r2
 8002178:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	f023 030a 	bic.w	r3, r3, #10
 8002180:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	4313      	orrs	r3, r2
 8002188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	621a      	str	r2, [r3, #32]
}
 8002196:	bf00      	nop
 8002198:	371c      	adds	r7, #28
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b087      	sub	sp, #28
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	60f8      	str	r0, [r7, #12]
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	f023 0210 	bic.w	r2, r3, #16
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80021cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	031b      	lsls	r3, r3, #12
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80021de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	621a      	str	r2, [r3, #32]
}
 80021f6:	bf00      	nop
 80021f8:	371c      	adds	r7, #28
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002202:	b480      	push	{r7}
 8002204:	b085      	sub	sp, #20
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002218:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4313      	orrs	r3, r2
 8002220:	f043 0307 	orr.w	r3, r3, #7
 8002224:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	609a      	str	r2, [r3, #8]
}
 800222c:	bf00      	nop
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002238:	b480      	push	{r7}
 800223a:	b087      	sub	sp, #28
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
 8002244:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002252:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	021a      	lsls	r2, r3, #8
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	431a      	orrs	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	4313      	orrs	r3, r2
 8002260:	697a      	ldr	r2, [r7, #20]
 8002262:	4313      	orrs	r3, r2
 8002264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	609a      	str	r2, [r3, #8]
}
 800226c:	bf00      	nop
 800226e:	371c      	adds	r7, #28
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002288:	2b01      	cmp	r3, #1
 800228a:	d101      	bne.n	8002290 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800228c:	2302      	movs	r3, #2
 800228e:	e050      	b.n	8002332 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2202      	movs	r2, #2
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	4313      	orrs	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a1c      	ldr	r2, [pc, #112]	; (8002340 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d018      	beq.n	8002306 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022dc:	d013      	beq.n	8002306 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a18      	ldr	r2, [pc, #96]	; (8002344 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d00e      	beq.n	8002306 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a16      	ldr	r2, [pc, #88]	; (8002348 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d009      	beq.n	8002306 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a15      	ldr	r2, [pc, #84]	; (800234c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d004      	beq.n	8002306 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a13      	ldr	r2, [pc, #76]	; (8002350 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d10c      	bne.n	8002320 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800230c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	4313      	orrs	r3, r2
 8002316:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40010000 	.word	0x40010000
 8002344:	40000400 	.word	0x40000400
 8002348:	40000800 	.word	0x40000800
 800234c:	40000c00 	.word	0x40000c00
 8002350:	40014000 	.word	0x40014000

08002354 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e03f      	b.n	800240e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d106      	bne.n	80023a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7fe fa98 	bl	80008d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2224      	movs	r2, #36	; 0x24
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 fddb 	bl	8002f7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	691a      	ldr	r2, [r3, #16]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695a      	ldr	r2, [r3, #20]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2220      	movs	r2, #32
 8002400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b08a      	sub	sp, #40	; 0x28
 800241a:	af02      	add	r7, sp, #8
 800241c:	60f8      	str	r0, [r7, #12]
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	603b      	str	r3, [r7, #0]
 8002422:	4613      	mov	r3, r2
 8002424:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b20      	cmp	r3, #32
 8002434:	d17c      	bne.n	8002530 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <HAL_UART_Transmit+0x2c>
 800243c:	88fb      	ldrh	r3, [r7, #6]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e075      	b.n	8002532 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800244c:	2b01      	cmp	r3, #1
 800244e:	d101      	bne.n	8002454 <HAL_UART_Transmit+0x3e>
 8002450:	2302      	movs	r3, #2
 8002452:	e06e      	b.n	8002532 <HAL_UART_Transmit+0x11c>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2221      	movs	r2, #33	; 0x21
 8002466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800246a:	f7fe fb65 	bl	8000b38 <HAL_GetTick>
 800246e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	88fa      	ldrh	r2, [r7, #6]
 8002474:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	88fa      	ldrh	r2, [r7, #6]
 800247a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002484:	d108      	bne.n	8002498 <HAL_UART_Transmit+0x82>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d104      	bne.n	8002498 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800248e:	2300      	movs	r3, #0
 8002490:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	61bb      	str	r3, [r7, #24]
 8002496:	e003      	b.n	80024a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800249c:	2300      	movs	r3, #0
 800249e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80024a8:	e02a      	b.n	8002500 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2200      	movs	r2, #0
 80024b2:	2180      	movs	r1, #128	; 0x80
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 fb1f 	bl	8002af8 <UART_WaitOnFlagUntilTimeout>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e036      	b.n	8002532 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10b      	bne.n	80024e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	461a      	mov	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	3302      	adds	r3, #2
 80024de:	61bb      	str	r3, [r7, #24]
 80024e0:	e007      	b.n	80024f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	781a      	ldrb	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	3301      	adds	r3, #1
 80024f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	3b01      	subs	r3, #1
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002504:	b29b      	uxth	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1cf      	bne.n	80024aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	2200      	movs	r2, #0
 8002512:	2140      	movs	r1, #64	; 0x40
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 faef 	bl	8002af8 <UART_WaitOnFlagUntilTimeout>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e006      	b.n	8002532 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2220      	movs	r2, #32
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800252c:	2300      	movs	r3, #0
 800252e:	e000      	b.n	8002532 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002530:	2302      	movs	r3, #2
  }
}
 8002532:	4618      	mov	r0, r3
 8002534:	3720      	adds	r7, #32
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b084      	sub	sp, #16
 800253e:	af00      	add	r7, sp, #0
 8002540:	60f8      	str	r0, [r7, #12]
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	4613      	mov	r3, r2
 8002546:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b20      	cmp	r3, #32
 8002552:	d11d      	bne.n	8002590 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d002      	beq.n	8002560 <HAL_UART_Receive_IT+0x26>
 800255a:	88fb      	ldrh	r3, [r7, #6]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e016      	b.n	8002592 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_UART_Receive_IT+0x38>
 800256e:	2302      	movs	r3, #2
 8002570:	e00f      	b.n	8002592 <HAL_UART_Receive_IT+0x58>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002580:	88fb      	ldrh	r3, [r7, #6]
 8002582:	461a      	mov	r2, r3
 8002584:	68b9      	ldr	r1, [r7, #8]
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 fb24 	bl	8002bd4 <UART_Start_Receive_IT>
 800258c:	4603      	mov	r3, r0
 800258e:	e000      	b.n	8002592 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002590:	2302      	movs	r3, #2
  }
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b0ba      	sub	sp, #232	; 0xe8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80025ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80025da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10f      	bne.n	8002602 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025e6:	f003 0320 	and.w	r3, r3, #32
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d009      	beq.n	8002602 <HAL_UART_IRQHandler+0x66>
 80025ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025f2:	f003 0320 	and.w	r3, r3, #32
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 fc03 	bl	8002e06 <UART_Receive_IT>
      return;
 8002600:	e256      	b.n	8002ab0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002602:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 80de 	beq.w	80027c8 <HAL_UART_IRQHandler+0x22c>
 800260c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b00      	cmp	r3, #0
 8002616:	d106      	bne.n	8002626 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800261c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 80d1 	beq.w	80027c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00b      	beq.n	800264a <HAL_UART_IRQHandler+0xae>
 8002632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263a:	2b00      	cmp	r3, #0
 800263c:	d005      	beq.n	800264a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	f043 0201 	orr.w	r2, r3, #1
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800264a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800264e:	f003 0304 	and.w	r3, r3, #4
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00b      	beq.n	800266e <HAL_UART_IRQHandler+0xd2>
 8002656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	d005      	beq.n	800266e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	f043 0202 	orr.w	r2, r3, #2
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800266e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00b      	beq.n	8002692 <HAL_UART_IRQHandler+0xf6>
 800267a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d005      	beq.n	8002692 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	f043 0204 	orr.w	r2, r3, #4
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b00      	cmp	r3, #0
 800269c:	d011      	beq.n	80026c2 <HAL_UART_IRQHandler+0x126>
 800269e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026a2:	f003 0320 	and.w	r3, r3, #32
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d105      	bne.n	80026b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80026aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d005      	beq.n	80026c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	f043 0208 	orr.w	r2, r3, #8
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 81ed 	beq.w	8002aa6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026d0:	f003 0320 	and.w	r3, r3, #32
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d008      	beq.n	80026ea <HAL_UART_IRQHandler+0x14e>
 80026d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026dc:	f003 0320 	and.w	r3, r3, #32
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d002      	beq.n	80026ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 fb8e 	bl	8002e06 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f4:	2b40      	cmp	r3, #64	; 0x40
 80026f6:	bf0c      	ite	eq
 80026f8:	2301      	moveq	r3, #1
 80026fa:	2300      	movne	r3, #0
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d103      	bne.n	8002716 <HAL_UART_IRQHandler+0x17a>
 800270e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002712:	2b00      	cmp	r3, #0
 8002714:	d04f      	beq.n	80027b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 fa96 	bl	8002c48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002726:	2b40      	cmp	r3, #64	; 0x40
 8002728:	d141      	bne.n	80027ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	3314      	adds	r3, #20
 8002730:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002734:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002738:	e853 3f00 	ldrex	r3, [r3]
 800273c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002740:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002748:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	3314      	adds	r3, #20
 8002752:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002756:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800275a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800275e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002762:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002766:	e841 2300 	strex	r3, r2, [r1]
 800276a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800276e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1d9      	bne.n	800272a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277a:	2b00      	cmp	r3, #0
 800277c:	d013      	beq.n	80027a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002782:	4a7d      	ldr	r2, [pc, #500]	; (8002978 <HAL_UART_IRQHandler+0x3dc>)
 8002784:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278a:	4618      	mov	r0, r3
 800278c:	f7fe fb61 	bl	8000e52 <HAL_DMA_Abort_IT>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d016      	beq.n	80027c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027a0:	4610      	mov	r0, r2
 80027a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027a4:	e00e      	b.n	80027c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f990 	bl	8002acc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027ac:	e00a      	b.n	80027c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f98c 	bl	8002acc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027b4:	e006      	b.n	80027c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f988 	bl	8002acc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80027c2:	e170      	b.n	8002aa6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027c4:	bf00      	nop
    return;
 80027c6:	e16e      	b.n	8002aa6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	f040 814a 	bne.w	8002a66 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80027d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027d6:	f003 0310 	and.w	r3, r3, #16
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 8143 	beq.w	8002a66 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80027e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027e4:	f003 0310 	and.w	r3, r3, #16
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 813c 	beq.w	8002a66 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027ee:	2300      	movs	r3, #0
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280e:	2b40      	cmp	r3, #64	; 0x40
 8002810:	f040 80b4 	bne.w	800297c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002820:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 8140 	beq.w	8002aaa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800282e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002832:	429a      	cmp	r2, r3
 8002834:	f080 8139 	bcs.w	8002aaa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800283e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800284a:	f000 8088 	beq.w	800295e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	330c      	adds	r3, #12
 8002854:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002858:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800285c:	e853 3f00 	ldrex	r3, [r3]
 8002860:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002864:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800286c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	330c      	adds	r3, #12
 8002876:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800287a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800287e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002882:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002886:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800288a:	e841 2300 	strex	r3, r2, [r1]
 800288e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002892:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1d9      	bne.n	800284e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	3314      	adds	r3, #20
 80028a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028a4:	e853 3f00 	ldrex	r3, [r3]
 80028a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80028aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028ac:	f023 0301 	bic.w	r3, r3, #1
 80028b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	3314      	adds	r3, #20
 80028ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80028be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80028c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80028c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80028ca:	e841 2300 	strex	r3, r2, [r1]
 80028ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80028d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1e1      	bne.n	800289a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	3314      	adds	r3, #20
 80028dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028e0:	e853 3f00 	ldrex	r3, [r3]
 80028e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80028e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	3314      	adds	r3, #20
 80028f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80028fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80028fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002900:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002902:	e841 2300 	strex	r3, r2, [r1]
 8002906:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002908:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1e3      	bne.n	80028d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2220      	movs	r2, #32
 8002912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	330c      	adds	r3, #12
 8002922:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002926:	e853 3f00 	ldrex	r3, [r3]
 800292a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800292c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800292e:	f023 0310 	bic.w	r3, r3, #16
 8002932:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	330c      	adds	r3, #12
 800293c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002940:	65ba      	str	r2, [r7, #88]	; 0x58
 8002942:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002944:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002946:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002948:	e841 2300 	strex	r3, r2, [r1]
 800294c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800294e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1e3      	bne.n	800291c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002958:	4618      	mov	r0, r3
 800295a:	f7fe fa0a 	bl	8000d72 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002966:	b29b      	uxth	r3, r3
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	b29b      	uxth	r3, r3
 800296c:	4619      	mov	r1, r3
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f8b6 	bl	8002ae0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002974:	e099      	b.n	8002aaa <HAL_UART_IRQHandler+0x50e>
 8002976:	bf00      	nop
 8002978:	08002d0f 	.word	0x08002d0f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002984:	b29b      	uxth	r3, r3
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002990:	b29b      	uxth	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 808b 	beq.w	8002aae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002998:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 8086 	beq.w	8002aae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	330c      	adds	r3, #12
 80029a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ac:	e853 3f00 	ldrex	r3, [r3]
 80029b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80029b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80029b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	330c      	adds	r3, #12
 80029c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80029c6:	647a      	str	r2, [r7, #68]	; 0x44
 80029c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80029cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029ce:	e841 2300 	strex	r3, r2, [r1]
 80029d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80029d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1e3      	bne.n	80029a2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	3314      	adds	r3, #20
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	e853 3f00 	ldrex	r3, [r3]
 80029e8:	623b      	str	r3, [r7, #32]
   return(result);
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	f023 0301 	bic.w	r3, r3, #1
 80029f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	3314      	adds	r3, #20
 80029fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80029fe:	633a      	str	r2, [r7, #48]	; 0x30
 8002a00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a06:	e841 2300 	strex	r3, r2, [r1]
 8002a0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1e3      	bne.n	80029da <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2220      	movs	r2, #32
 8002a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	330c      	adds	r3, #12
 8002a26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	e853 3f00 	ldrex	r3, [r3]
 8002a2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f023 0310 	bic.w	r3, r3, #16
 8002a36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	330c      	adds	r3, #12
 8002a40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002a44:	61fa      	str	r2, [r7, #28]
 8002a46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a48:	69b9      	ldr	r1, [r7, #24]
 8002a4a:	69fa      	ldr	r2, [r7, #28]
 8002a4c:	e841 2300 	strex	r3, r2, [r1]
 8002a50:	617b      	str	r3, [r7, #20]
   return(result);
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1e3      	bne.n	8002a20 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f83e 	bl	8002ae0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a64:	e023      	b.n	8002aae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d009      	beq.n	8002a86 <HAL_UART_IRQHandler+0x4ea>
 8002a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f959 	bl	8002d36 <UART_Transmit_IT>
    return;
 8002a84:	e014      	b.n	8002ab0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00e      	beq.n	8002ab0 <HAL_UART_IRQHandler+0x514>
 8002a92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d008      	beq.n	8002ab0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f999 	bl	8002dd6 <UART_EndTransmit_IT>
    return;
 8002aa4:	e004      	b.n	8002ab0 <HAL_UART_IRQHandler+0x514>
    return;
 8002aa6:	bf00      	nop
 8002aa8:	e002      	b.n	8002ab0 <HAL_UART_IRQHandler+0x514>
      return;
 8002aaa:	bf00      	nop
 8002aac:	e000      	b.n	8002ab0 <HAL_UART_IRQHandler+0x514>
      return;
 8002aae:	bf00      	nop
  }
}
 8002ab0:	37e8      	adds	r7, #232	; 0xe8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop

08002ab8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b090      	sub	sp, #64	; 0x40
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	603b      	str	r3, [r7, #0]
 8002b04:	4613      	mov	r3, r2
 8002b06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b08:	e050      	b.n	8002bac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b10:	d04c      	beq.n	8002bac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d007      	beq.n	8002b28 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b18:	f7fe f80e 	bl	8000b38 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d241      	bcs.n	8002bac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	330c      	adds	r3, #12
 8002b2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b32:	e853 3f00 	ldrex	r3, [r3]
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	330c      	adds	r3, #12
 8002b46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b48:	637a      	str	r2, [r7, #52]	; 0x34
 8002b4a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b50:	e841 2300 	strex	r3, r2, [r1]
 8002b54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1e5      	bne.n	8002b28 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	3314      	adds	r3, #20
 8002b62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	e853 3f00 	ldrex	r3, [r3]
 8002b6a:	613b      	str	r3, [r7, #16]
   return(result);
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	f023 0301 	bic.w	r3, r3, #1
 8002b72:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	3314      	adds	r3, #20
 8002b7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b7c:	623a      	str	r2, [r7, #32]
 8002b7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b80:	69f9      	ldr	r1, [r7, #28]
 8002b82:	6a3a      	ldr	r2, [r7, #32]
 8002b84:	e841 2300 	strex	r3, r2, [r1]
 8002b88:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1e5      	bne.n	8002b5c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2220      	movs	r2, #32
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e00f      	b.n	8002bcc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	bf0c      	ite	eq
 8002bbc:	2301      	moveq	r3, #1
 8002bbe:	2300      	movne	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d09f      	beq.n	8002b0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3740      	adds	r7, #64	; 0x40
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	4613      	mov	r3, r2
 8002be0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	68ba      	ldr	r2, [r7, #8]
 8002be6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	88fa      	ldrh	r2, [r7, #6]
 8002bec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	88fa      	ldrh	r2, [r7, #6]
 8002bf2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2222      	movs	r2, #34	; 0x22
 8002bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68da      	ldr	r2, [r3, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c18:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	695a      	ldr	r2, [r3, #20]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f042 0201 	orr.w	r2, r2, #1
 8002c28:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68da      	ldr	r2, [r3, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f042 0220 	orr.w	r2, r2, #32
 8002c38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b095      	sub	sp, #84	; 0x54
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	330c      	adds	r3, #12
 8002c56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c5a:	e853 3f00 	ldrex	r3, [r3]
 8002c5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	330c      	adds	r3, #12
 8002c6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c70:	643a      	str	r2, [r7, #64]	; 0x40
 8002c72:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c78:	e841 2300 	strex	r3, r2, [r1]
 8002c7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1e5      	bne.n	8002c50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	3314      	adds	r3, #20
 8002c8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	e853 3f00 	ldrex	r3, [r3]
 8002c92:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f023 0301 	bic.w	r3, r3, #1
 8002c9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	3314      	adds	r3, #20
 8002ca2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ca4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ca6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002caa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cac:	e841 2300 	strex	r3, r2, [r1]
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1e5      	bne.n	8002c84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d119      	bne.n	8002cf4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	330c      	adds	r3, #12
 8002cc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	e853 3f00 	ldrex	r3, [r3]
 8002cce:	60bb      	str	r3, [r7, #8]
   return(result);
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f023 0310 	bic.w	r3, r3, #16
 8002cd6:	647b      	str	r3, [r7, #68]	; 0x44
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	330c      	adds	r3, #12
 8002cde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ce0:	61ba      	str	r2, [r7, #24]
 8002ce2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce4:	6979      	ldr	r1, [r7, #20]
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	e841 2300 	strex	r3, r2, [r1]
 8002cec:	613b      	str	r3, [r7, #16]
   return(result);
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1e5      	bne.n	8002cc0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002d02:	bf00      	nop
 8002d04:	3754      	adds	r7, #84	; 0x54
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b084      	sub	sp, #16
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f7ff fecf 	bl	8002acc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d2e:	bf00      	nop
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b085      	sub	sp, #20
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b21      	cmp	r3, #33	; 0x21
 8002d48:	d13e      	bne.n	8002dc8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d52:	d114      	bne.n	8002d7e <UART_Transmit_IT+0x48>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d110      	bne.n	8002d7e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	881b      	ldrh	r3, [r3, #0]
 8002d66:	461a      	mov	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d70:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	1c9a      	adds	r2, r3, #2
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	621a      	str	r2, [r3, #32]
 8002d7c:	e008      	b.n	8002d90 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	1c59      	adds	r1, r3, #1
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6211      	str	r1, [r2, #32]
 8002d88:	781a      	ldrb	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10f      	bne.n	8002dc4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002db2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68da      	ldr	r2, [r3, #12]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dc2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	e000      	b.n	8002dca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002dc8:	2302      	movs	r3, #2
  }
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b082      	sub	sp, #8
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68da      	ldr	r2, [r3, #12]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2220      	movs	r2, #32
 8002df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7ff fe5e 	bl	8002ab8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b08c      	sub	sp, #48	; 0x30
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b22      	cmp	r3, #34	; 0x22
 8002e18:	f040 80ab 	bne.w	8002f72 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e24:	d117      	bne.n	8002e56 <UART_Receive_IT+0x50>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d113      	bne.n	8002e56 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e36:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4e:	1c9a      	adds	r2, r3, #2
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	629a      	str	r2, [r3, #40]	; 0x28
 8002e54:	e026      	b.n	8002ea4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e68:	d007      	beq.n	8002e7a <UART_Receive_IT+0x74>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10a      	bne.n	8002e88 <UART_Receive_IT+0x82>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d106      	bne.n	8002e88 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e84:	701a      	strb	r2, [r3, #0]
 8002e86:	e008      	b.n	8002e9a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e98:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d15a      	bne.n	8002f6e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0220 	bic.w	r2, r2, #32
 8002ec6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ed6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695a      	ldr	r2, [r3, #20]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0201 	bic.w	r2, r2, #1
 8002ee6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d135      	bne.n	8002f64 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	330c      	adds	r3, #12
 8002f04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	e853 3f00 	ldrex	r3, [r3]
 8002f0c:	613b      	str	r3, [r7, #16]
   return(result);
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	f023 0310 	bic.w	r3, r3, #16
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	330c      	adds	r3, #12
 8002f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f1e:	623a      	str	r2, [r7, #32]
 8002f20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f22:	69f9      	ldr	r1, [r7, #28]
 8002f24:	6a3a      	ldr	r2, [r7, #32]
 8002f26:	e841 2300 	strex	r3, r2, [r1]
 8002f2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1e5      	bne.n	8002efe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0310 	and.w	r3, r3, #16
 8002f3c:	2b10      	cmp	r3, #16
 8002f3e:	d10a      	bne.n	8002f56 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f40:	2300      	movs	r3, #0
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f7ff fdbf 	bl	8002ae0 <HAL_UARTEx_RxEventCallback>
 8002f62:	e002      	b.n	8002f6a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f7fd facb 	bl	8000500 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	e002      	b.n	8002f74 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	e000      	b.n	8002f74 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002f72:	2302      	movs	r3, #2
  }
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3730      	adds	r7, #48	; 0x30
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f80:	b09f      	sub	sp, #124	; 0x7c
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f92:	68d9      	ldr	r1, [r3, #12]
 8002f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	ea40 0301 	orr.w	r3, r0, r1
 8002f9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	431a      	orrs	r2, r3
 8002fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002fc0:	f021 010c 	bic.w	r1, r1, #12
 8002fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fca:	430b      	orrs	r3, r1
 8002fcc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fda:	6999      	ldr	r1, [r3, #24]
 8002fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	ea40 0301 	orr.w	r3, r0, r1
 8002fe4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	4bc5      	ldr	r3, [pc, #788]	; (8003300 <UART_SetConfig+0x384>)
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d004      	beq.n	8002ffa <UART_SetConfig+0x7e>
 8002ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	4bc3      	ldr	r3, [pc, #780]	; (8003304 <UART_SetConfig+0x388>)
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d103      	bne.n	8003002 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ffa:	f7fe fd65 	bl	8001ac8 <HAL_RCC_GetPCLK2Freq>
 8002ffe:	6778      	str	r0, [r7, #116]	; 0x74
 8003000:	e002      	b.n	8003008 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003002:	f7fe fd4d 	bl	8001aa0 <HAL_RCC_GetPCLK1Freq>
 8003006:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800300a:	69db      	ldr	r3, [r3, #28]
 800300c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003010:	f040 80b6 	bne.w	8003180 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003014:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003016:	461c      	mov	r4, r3
 8003018:	f04f 0500 	mov.w	r5, #0
 800301c:	4622      	mov	r2, r4
 800301e:	462b      	mov	r3, r5
 8003020:	1891      	adds	r1, r2, r2
 8003022:	6439      	str	r1, [r7, #64]	; 0x40
 8003024:	415b      	adcs	r3, r3
 8003026:	647b      	str	r3, [r7, #68]	; 0x44
 8003028:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800302c:	1912      	adds	r2, r2, r4
 800302e:	eb45 0303 	adc.w	r3, r5, r3
 8003032:	f04f 0000 	mov.w	r0, #0
 8003036:	f04f 0100 	mov.w	r1, #0
 800303a:	00d9      	lsls	r1, r3, #3
 800303c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003040:	00d0      	lsls	r0, r2, #3
 8003042:	4602      	mov	r2, r0
 8003044:	460b      	mov	r3, r1
 8003046:	1911      	adds	r1, r2, r4
 8003048:	6639      	str	r1, [r7, #96]	; 0x60
 800304a:	416b      	adcs	r3, r5
 800304c:	667b      	str	r3, [r7, #100]	; 0x64
 800304e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	461a      	mov	r2, r3
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	1891      	adds	r1, r2, r2
 800305a:	63b9      	str	r1, [r7, #56]	; 0x38
 800305c:	415b      	adcs	r3, r3
 800305e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003060:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003064:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003068:	f7fd f8b4 	bl	80001d4 <__aeabi_uldivmod>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	4ba5      	ldr	r3, [pc, #660]	; (8003308 <UART_SetConfig+0x38c>)
 8003072:	fba3 2302 	umull	r2, r3, r3, r2
 8003076:	095b      	lsrs	r3, r3, #5
 8003078:	011e      	lsls	r6, r3, #4
 800307a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800307c:	461c      	mov	r4, r3
 800307e:	f04f 0500 	mov.w	r5, #0
 8003082:	4622      	mov	r2, r4
 8003084:	462b      	mov	r3, r5
 8003086:	1891      	adds	r1, r2, r2
 8003088:	6339      	str	r1, [r7, #48]	; 0x30
 800308a:	415b      	adcs	r3, r3
 800308c:	637b      	str	r3, [r7, #52]	; 0x34
 800308e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003092:	1912      	adds	r2, r2, r4
 8003094:	eb45 0303 	adc.w	r3, r5, r3
 8003098:	f04f 0000 	mov.w	r0, #0
 800309c:	f04f 0100 	mov.w	r1, #0
 80030a0:	00d9      	lsls	r1, r3, #3
 80030a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030a6:	00d0      	lsls	r0, r2, #3
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	1911      	adds	r1, r2, r4
 80030ae:	65b9      	str	r1, [r7, #88]	; 0x58
 80030b0:	416b      	adcs	r3, r5
 80030b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	461a      	mov	r2, r3
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	1891      	adds	r1, r2, r2
 80030c0:	62b9      	str	r1, [r7, #40]	; 0x28
 80030c2:	415b      	adcs	r3, r3
 80030c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030ca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80030ce:	f7fd f881 	bl	80001d4 <__aeabi_uldivmod>
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	4b8c      	ldr	r3, [pc, #560]	; (8003308 <UART_SetConfig+0x38c>)
 80030d8:	fba3 1302 	umull	r1, r3, r3, r2
 80030dc:	095b      	lsrs	r3, r3, #5
 80030de:	2164      	movs	r1, #100	; 0x64
 80030e0:	fb01 f303 	mul.w	r3, r1, r3
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	3332      	adds	r3, #50	; 0x32
 80030ea:	4a87      	ldr	r2, [pc, #540]	; (8003308 <UART_SetConfig+0x38c>)
 80030ec:	fba2 2303 	umull	r2, r3, r2, r3
 80030f0:	095b      	lsrs	r3, r3, #5
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030f8:	441e      	add	r6, r3
 80030fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030fc:	4618      	mov	r0, r3
 80030fe:	f04f 0100 	mov.w	r1, #0
 8003102:	4602      	mov	r2, r0
 8003104:	460b      	mov	r3, r1
 8003106:	1894      	adds	r4, r2, r2
 8003108:	623c      	str	r4, [r7, #32]
 800310a:	415b      	adcs	r3, r3
 800310c:	627b      	str	r3, [r7, #36]	; 0x24
 800310e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003112:	1812      	adds	r2, r2, r0
 8003114:	eb41 0303 	adc.w	r3, r1, r3
 8003118:	f04f 0400 	mov.w	r4, #0
 800311c:	f04f 0500 	mov.w	r5, #0
 8003120:	00dd      	lsls	r5, r3, #3
 8003122:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003126:	00d4      	lsls	r4, r2, #3
 8003128:	4622      	mov	r2, r4
 800312a:	462b      	mov	r3, r5
 800312c:	1814      	adds	r4, r2, r0
 800312e:	653c      	str	r4, [r7, #80]	; 0x50
 8003130:	414b      	adcs	r3, r1
 8003132:	657b      	str	r3, [r7, #84]	; 0x54
 8003134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	461a      	mov	r2, r3
 800313a:	f04f 0300 	mov.w	r3, #0
 800313e:	1891      	adds	r1, r2, r2
 8003140:	61b9      	str	r1, [r7, #24]
 8003142:	415b      	adcs	r3, r3
 8003144:	61fb      	str	r3, [r7, #28]
 8003146:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800314a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800314e:	f7fd f841 	bl	80001d4 <__aeabi_uldivmod>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	4b6c      	ldr	r3, [pc, #432]	; (8003308 <UART_SetConfig+0x38c>)
 8003158:	fba3 1302 	umull	r1, r3, r3, r2
 800315c:	095b      	lsrs	r3, r3, #5
 800315e:	2164      	movs	r1, #100	; 0x64
 8003160:	fb01 f303 	mul.w	r3, r1, r3
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	3332      	adds	r3, #50	; 0x32
 800316a:	4a67      	ldr	r2, [pc, #412]	; (8003308 <UART_SetConfig+0x38c>)
 800316c:	fba2 2303 	umull	r2, r3, r2, r3
 8003170:	095b      	lsrs	r3, r3, #5
 8003172:	f003 0207 	and.w	r2, r3, #7
 8003176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4432      	add	r2, r6
 800317c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800317e:	e0b9      	b.n	80032f4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003180:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003182:	461c      	mov	r4, r3
 8003184:	f04f 0500 	mov.w	r5, #0
 8003188:	4622      	mov	r2, r4
 800318a:	462b      	mov	r3, r5
 800318c:	1891      	adds	r1, r2, r2
 800318e:	6139      	str	r1, [r7, #16]
 8003190:	415b      	adcs	r3, r3
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003198:	1912      	adds	r2, r2, r4
 800319a:	eb45 0303 	adc.w	r3, r5, r3
 800319e:	f04f 0000 	mov.w	r0, #0
 80031a2:	f04f 0100 	mov.w	r1, #0
 80031a6:	00d9      	lsls	r1, r3, #3
 80031a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031ac:	00d0      	lsls	r0, r2, #3
 80031ae:	4602      	mov	r2, r0
 80031b0:	460b      	mov	r3, r1
 80031b2:	eb12 0804 	adds.w	r8, r2, r4
 80031b6:	eb43 0905 	adc.w	r9, r3, r5
 80031ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	4618      	mov	r0, r3
 80031c0:	f04f 0100 	mov.w	r1, #0
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	f04f 0300 	mov.w	r3, #0
 80031cc:	008b      	lsls	r3, r1, #2
 80031ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80031d2:	0082      	lsls	r2, r0, #2
 80031d4:	4640      	mov	r0, r8
 80031d6:	4649      	mov	r1, r9
 80031d8:	f7fc fffc 	bl	80001d4 <__aeabi_uldivmod>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4b49      	ldr	r3, [pc, #292]	; (8003308 <UART_SetConfig+0x38c>)
 80031e2:	fba3 2302 	umull	r2, r3, r3, r2
 80031e6:	095b      	lsrs	r3, r3, #5
 80031e8:	011e      	lsls	r6, r3, #4
 80031ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031ec:	4618      	mov	r0, r3
 80031ee:	f04f 0100 	mov.w	r1, #0
 80031f2:	4602      	mov	r2, r0
 80031f4:	460b      	mov	r3, r1
 80031f6:	1894      	adds	r4, r2, r2
 80031f8:	60bc      	str	r4, [r7, #8]
 80031fa:	415b      	adcs	r3, r3
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003202:	1812      	adds	r2, r2, r0
 8003204:	eb41 0303 	adc.w	r3, r1, r3
 8003208:	f04f 0400 	mov.w	r4, #0
 800320c:	f04f 0500 	mov.w	r5, #0
 8003210:	00dd      	lsls	r5, r3, #3
 8003212:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003216:	00d4      	lsls	r4, r2, #3
 8003218:	4622      	mov	r2, r4
 800321a:	462b      	mov	r3, r5
 800321c:	1814      	adds	r4, r2, r0
 800321e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003220:	414b      	adcs	r3, r1
 8003222:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	4618      	mov	r0, r3
 800322a:	f04f 0100 	mov.w	r1, #0
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	f04f 0300 	mov.w	r3, #0
 8003236:	008b      	lsls	r3, r1, #2
 8003238:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800323c:	0082      	lsls	r2, r0, #2
 800323e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003242:	f7fc ffc7 	bl	80001d4 <__aeabi_uldivmod>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4b2f      	ldr	r3, [pc, #188]	; (8003308 <UART_SetConfig+0x38c>)
 800324c:	fba3 1302 	umull	r1, r3, r3, r2
 8003250:	095b      	lsrs	r3, r3, #5
 8003252:	2164      	movs	r1, #100	; 0x64
 8003254:	fb01 f303 	mul.w	r3, r1, r3
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	3332      	adds	r3, #50	; 0x32
 800325e:	4a2a      	ldr	r2, [pc, #168]	; (8003308 <UART_SetConfig+0x38c>)
 8003260:	fba2 2303 	umull	r2, r3, r2, r3
 8003264:	095b      	lsrs	r3, r3, #5
 8003266:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800326a:	441e      	add	r6, r3
 800326c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800326e:	4618      	mov	r0, r3
 8003270:	f04f 0100 	mov.w	r1, #0
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	1894      	adds	r4, r2, r2
 800327a:	603c      	str	r4, [r7, #0]
 800327c:	415b      	adcs	r3, r3
 800327e:	607b      	str	r3, [r7, #4]
 8003280:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003284:	1812      	adds	r2, r2, r0
 8003286:	eb41 0303 	adc.w	r3, r1, r3
 800328a:	f04f 0400 	mov.w	r4, #0
 800328e:	f04f 0500 	mov.w	r5, #0
 8003292:	00dd      	lsls	r5, r3, #3
 8003294:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003298:	00d4      	lsls	r4, r2, #3
 800329a:	4622      	mov	r2, r4
 800329c:	462b      	mov	r3, r5
 800329e:	eb12 0a00 	adds.w	sl, r2, r0
 80032a2:	eb43 0b01 	adc.w	fp, r3, r1
 80032a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f04f 0100 	mov.w	r1, #0
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	008b      	lsls	r3, r1, #2
 80032ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80032be:	0082      	lsls	r2, r0, #2
 80032c0:	4650      	mov	r0, sl
 80032c2:	4659      	mov	r1, fp
 80032c4:	f7fc ff86 	bl	80001d4 <__aeabi_uldivmod>
 80032c8:	4602      	mov	r2, r0
 80032ca:	460b      	mov	r3, r1
 80032cc:	4b0e      	ldr	r3, [pc, #56]	; (8003308 <UART_SetConfig+0x38c>)
 80032ce:	fba3 1302 	umull	r1, r3, r3, r2
 80032d2:	095b      	lsrs	r3, r3, #5
 80032d4:	2164      	movs	r1, #100	; 0x64
 80032d6:	fb01 f303 	mul.w	r3, r1, r3
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	3332      	adds	r3, #50	; 0x32
 80032e0:	4a09      	ldr	r2, [pc, #36]	; (8003308 <UART_SetConfig+0x38c>)
 80032e2:	fba2 2303 	umull	r2, r3, r2, r3
 80032e6:	095b      	lsrs	r3, r3, #5
 80032e8:	f003 020f 	and.w	r2, r3, #15
 80032ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4432      	add	r2, r6
 80032f2:	609a      	str	r2, [r3, #8]
}
 80032f4:	bf00      	nop
 80032f6:	377c      	adds	r7, #124	; 0x7c
 80032f8:	46bd      	mov	sp, r7
 80032fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032fe:	bf00      	nop
 8003300:	40011000 	.word	0x40011000
 8003304:	40011400 	.word	0x40011400
 8003308:	51eb851f 	.word	0x51eb851f

0800330c <__libc_init_array>:
 800330c:	b570      	push	{r4, r5, r6, lr}
 800330e:	4d0d      	ldr	r5, [pc, #52]	; (8003344 <__libc_init_array+0x38>)
 8003310:	4c0d      	ldr	r4, [pc, #52]	; (8003348 <__libc_init_array+0x3c>)
 8003312:	1b64      	subs	r4, r4, r5
 8003314:	10a4      	asrs	r4, r4, #2
 8003316:	2600      	movs	r6, #0
 8003318:	42a6      	cmp	r6, r4
 800331a:	d109      	bne.n	8003330 <__libc_init_array+0x24>
 800331c:	4d0b      	ldr	r5, [pc, #44]	; (800334c <__libc_init_array+0x40>)
 800331e:	4c0c      	ldr	r4, [pc, #48]	; (8003350 <__libc_init_array+0x44>)
 8003320:	f000 f820 	bl	8003364 <_init>
 8003324:	1b64      	subs	r4, r4, r5
 8003326:	10a4      	asrs	r4, r4, #2
 8003328:	2600      	movs	r6, #0
 800332a:	42a6      	cmp	r6, r4
 800332c:	d105      	bne.n	800333a <__libc_init_array+0x2e>
 800332e:	bd70      	pop	{r4, r5, r6, pc}
 8003330:	f855 3b04 	ldr.w	r3, [r5], #4
 8003334:	4798      	blx	r3
 8003336:	3601      	adds	r6, #1
 8003338:	e7ee      	b.n	8003318 <__libc_init_array+0xc>
 800333a:	f855 3b04 	ldr.w	r3, [r5], #4
 800333e:	4798      	blx	r3
 8003340:	3601      	adds	r6, #1
 8003342:	e7f2      	b.n	800332a <__libc_init_array+0x1e>
 8003344:	0800339c 	.word	0x0800339c
 8003348:	0800339c 	.word	0x0800339c
 800334c:	0800339c 	.word	0x0800339c
 8003350:	080033a0 	.word	0x080033a0

08003354 <memset>:
 8003354:	4402      	add	r2, r0
 8003356:	4603      	mov	r3, r0
 8003358:	4293      	cmp	r3, r2
 800335a:	d100      	bne.n	800335e <memset+0xa>
 800335c:	4770      	bx	lr
 800335e:	f803 1b01 	strb.w	r1, [r3], #1
 8003362:	e7f9      	b.n	8003358 <memset+0x4>

08003364 <_init>:
 8003364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003366:	bf00      	nop
 8003368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800336a:	bc08      	pop	{r3}
 800336c:	469e      	mov	lr, r3
 800336e:	4770      	bx	lr

08003370 <_fini>:
 8003370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003372:	bf00      	nop
 8003374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003376:	bc08      	pop	{r3}
 8003378:	469e      	mov	lr, r3
 800337a:	4770      	bx	lr
